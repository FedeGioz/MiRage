/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.federicogiordano.mirage.apis

import com.federicogiordano.mirage.models.GetActionDefinition
import com.federicogiordano.mirage.models.GetActionDefinitions
import com.federicogiordano.mirage.models.GetAreaActionDefinition
import com.federicogiordano.mirage.models.GetAreaActionDefinitions
import com.federicogiordano.mirage.models.GetAreaEvent
import com.federicogiordano.mirage.models.GetAreaEvents
import com.federicogiordano.mirage.models.GetAreaEventsDefinitions
import com.federicogiordano.mirage.models.GetBluetooth
import com.federicogiordano.mirage.models.GetBluetoothRelay
import com.federicogiordano.mirage.models.GetBluetoothRelays
import com.federicogiordano.mirage.models.GetCart
import com.federicogiordano.mirage.models.GetCartCalibration
import com.federicogiordano.mirage.models.GetCartCalibrations
import com.federicogiordano.mirage.models.GetCartType
import com.federicogiordano.mirage.models.GetCartTypes
import com.federicogiordano.mirage.models.GetCarts
import com.federicogiordano.mirage.models.GetDashboard
import com.federicogiordano.mirage.models.GetDashboardWidget
import com.federicogiordano.mirage.models.GetDashboardWidgets
import com.federicogiordano.mirage.models.GetDashboards
import com.federicogiordano.mirage.models.GetDistanceStatistics
import com.federicogiordano.mirage.models.GetDockingOffset
import com.federicogiordano.mirage.models.GetDockingOffsets
import com.federicogiordano.mirage.models.GetErrorReport
import com.federicogiordano.mirage.models.GetErrorReports
import com.federicogiordano.mirage.models.GetGroupActionDefinition
import com.federicogiordano.mirage.models.GetGroupMissions
import com.federicogiordano.mirage.models.GetHelperPositions
import com.federicogiordano.mirage.models.GetHook
import com.federicogiordano.mirage.models.GetHookBrake
import com.federicogiordano.mirage.models.GetHookGripper
import com.federicogiordano.mirage.models.GetHookHeight
import com.federicogiordano.mirage.models.GetIoModule
import com.federicogiordano.mirage.models.GetIoModules
import com.federicogiordano.mirage.models.GetMap
import com.federicogiordano.mirage.models.GetMapAreaEvent
import com.federicogiordano.mirage.models.GetMapPathGuides
import com.federicogiordano.mirage.models.GetMapPaths
import com.federicogiordano.mirage.models.GetMapPositions
import com.federicogiordano.mirage.models.GetMaps
import com.federicogiordano.mirage.models.GetMe
import com.federicogiordano.mirage.models.GetMission
import com.federicogiordano.mirage.models.GetMissionAction
import com.federicogiordano.mirage.models.GetMissionActions
import com.federicogiordano.mirage.models.GetMissionDefinition
import com.federicogiordano.mirage.models.GetMissionGroup
import com.federicogiordano.mirage.models.GetMissionGroups
import com.federicogiordano.mirage.models.GetMissionQueue
import com.federicogiordano.mirage.models.GetMissionQueueAction
import com.federicogiordano.mirage.models.GetMissionQueueActions
import com.federicogiordano.mirage.models.GetMissionQueues
import com.federicogiordano.mirage.models.GetMissions
import com.federicogiordano.mirage.models.GetModbu
import com.federicogiordano.mirage.models.GetModbus
import com.federicogiordano.mirage.models.GetModbusMission
import com.federicogiordano.mirage.models.GetModbusMissions
import com.federicogiordano.mirage.models.GetPath
import com.federicogiordano.mirage.models.GetPathGuide
import com.federicogiordano.mirage.models.GetPathGuideOptions
import com.federicogiordano.mirage.models.GetPathGuidePosition
import com.federicogiordano.mirage.models.GetPathGuidePositions
import com.federicogiordano.mirage.models.GetPathGuides
import com.federicogiordano.mirage.models.GetPathGuidesPosition
import com.federicogiordano.mirage.models.GetPathGuidesPositions
import com.federicogiordano.mirage.models.GetPathGuidesPrecalc
import com.federicogiordano.mirage.models.GetPaths
import com.federicogiordano.mirage.models.GetPermission
import com.federicogiordano.mirage.models.GetPosDockingOffsets
import com.federicogiordano.mirage.models.GetPosition
import com.federicogiordano.mirage.models.GetPositionTransitionList
import com.federicogiordano.mirage.models.GetPositionTransitionListFromSession
import com.federicogiordano.mirage.models.GetPositionTransitionLists
import com.federicogiordano.mirage.models.GetPositionType
import com.federicogiordano.mirage.models.GetPositionTypes
import com.federicogiordano.mirage.models.GetPositions
import com.federicogiordano.mirage.models.GetRegister
import com.federicogiordano.mirage.models.GetRegisters
import com.federicogiordano.mirage.models.GetServiceBook
import com.federicogiordano.mirage.models.GetServiceBooks
import com.federicogiordano.mirage.models.GetSession
import com.federicogiordano.mirage.models.GetSessionImport
import com.federicogiordano.mirage.models.GetSessionMaps
import com.federicogiordano.mirage.models.GetSessionMissions
import com.federicogiordano.mirage.models.GetSessions
import com.federicogiordano.mirage.models.GetSetting
import com.federicogiordano.mirage.models.GetSettingAdvanced
import com.federicogiordano.mirage.models.GetSettingGroup
import com.federicogiordano.mirage.models.GetSettingGroupAdvancedSettings
import com.federicogiordano.mirage.models.GetSettingGroupSettings
import com.federicogiordano.mirage.models.GetSettingGroups
import com.federicogiordano.mirage.models.GetSettings
import com.federicogiordano.mirage.models.GetSettingsAdvanced
import com.federicogiordano.mirage.models.GetShelfType
import com.federicogiordano.mirage.models.GetShelfTypes
import com.federicogiordano.mirage.models.GetSoftwareBackup
import com.federicogiordano.mirage.models.GetSoftwareBackups
import com.federicogiordano.mirage.models.GetSoftwareLockSelf
import com.federicogiordano.mirage.models.GetSoftwareLog
import com.federicogiordano.mirage.models.GetSoftwareLogs
import com.federicogiordano.mirage.models.GetSoftwareUpgrade
import com.federicogiordano.mirage.models.GetSoftwareUpgrades
import com.federicogiordano.mirage.models.GetSound
import com.federicogiordano.mirage.models.GetSoundStream
import com.federicogiordano.mirage.models.GetSounds
import com.federicogiordano.mirage.models.GetStatus
import com.federicogiordano.mirage.models.GetUser
import com.federicogiordano.mirage.models.GetUserGroup
import com.federicogiordano.mirage.models.GetUserGroupPermission
import com.federicogiordano.mirage.models.GetUserGroups
import com.federicogiordano.mirage.models.GetUserMePermissions
import com.federicogiordano.mirage.models.GetUsers
import com.federicogiordano.mirage.models.GetUsersAuth
import com.federicogiordano.mirage.models.GetWifiConnection
import com.federicogiordano.mirage.models.GetWifiConnections
import com.federicogiordano.mirage.models.GetWifiNetwork
import com.federicogiordano.mirage.models.GetWifiNetworks
import com.federicogiordano.mirage.models.PostActionDefinition
import com.federicogiordano.mirage.models.PostAreaEvents
import com.federicogiordano.mirage.models.PostBluetoothRelays
import com.federicogiordano.mirage.models.PostBluetoothStatus
import com.federicogiordano.mirage.models.PostCartCalibrations
import com.federicogiordano.mirage.models.PostCartTypes
import com.federicogiordano.mirage.models.PostCarts
import com.federicogiordano.mirage.models.PostDashboardWidgets
import com.federicogiordano.mirage.models.PostDashboards
import com.federicogiordano.mirage.models.PostDockingOffsets
import com.federicogiordano.mirage.models.PostErrorReports
import com.federicogiordano.mirage.models.PostFactoryReset
import com.federicogiordano.mirage.models.PostHwConfigImport
import com.federicogiordano.mirage.models.PostIoModules
import com.federicogiordano.mirage.models.PostMaps
import com.federicogiordano.mirage.models.PostMissionActions
import com.federicogiordano.mirage.models.PostMissionGroups
import com.federicogiordano.mirage.models.PostMissionQueues
import com.federicogiordano.mirage.models.PostMissions
import com.federicogiordano.mirage.models.PostModbusMissions
import com.federicogiordano.mirage.models.PostPathGuidePositions
import com.federicogiordano.mirage.models.PostPathGuides
import com.federicogiordano.mirage.models.PostPathGuidesPositions
import com.federicogiordano.mirage.models.PostPathGuidesPrecalc
import com.federicogiordano.mirage.models.PostPaths
import com.federicogiordano.mirage.models.PostPositionTransitionLists
import com.federicogiordano.mirage.models.PostPositions
import com.federicogiordano.mirage.models.PostRegister
import com.federicogiordano.mirage.models.PostRobots
import com.federicogiordano.mirage.models.PostServiceBooks
import com.federicogiordano.mirage.models.PostSessionImport
import com.federicogiordano.mirage.models.PostSessions
import com.federicogiordano.mirage.models.PostShelfTypes
import com.federicogiordano.mirage.models.PostSounds
import com.federicogiordano.mirage.models.PostUserGroupPermission
import com.federicogiordano.mirage.models.PostUserGroups
import com.federicogiordano.mirage.models.PostUsers
import com.federicogiordano.mirage.models.PostUsersAuth
import com.federicogiordano.mirage.models.PostWifiConnection
import com.federicogiordano.mirage.models.PostWifiConnections
import com.federicogiordano.mirage.models.PostWorldModel
import com.federicogiordano.mirage.models.PutAreaEvent
import com.federicogiordano.mirage.models.PutBluetoothRelay
import com.federicogiordano.mirage.models.PutBluetoothStatus
import com.federicogiordano.mirage.models.PutCart
import com.federicogiordano.mirage.models.PutCartCalibration
import com.federicogiordano.mirage.models.PutCartType
import com.federicogiordano.mirage.models.PutDashboard
import com.federicogiordano.mirage.models.PutDashboardWidget
import com.federicogiordano.mirage.models.PutDockingOffset
import com.federicogiordano.mirage.models.PutHookBrake
import com.federicogiordano.mirage.models.PutHookGripper
import com.federicogiordano.mirage.models.PutHookHeight
import com.federicogiordano.mirage.models.PutIoModule
import com.federicogiordano.mirage.models.PutIoModuleStatus
import com.federicogiordano.mirage.models.PutMap
import com.federicogiordano.mirage.models.PutMe
import com.federicogiordano.mirage.models.PutMission
import com.federicogiordano.mirage.models.PutMissionAction
import com.federicogiordano.mirage.models.PutMissionGroup
import com.federicogiordano.mirage.models.PutMissionQueue
import com.federicogiordano.mirage.models.PutModbusMission
import com.federicogiordano.mirage.models.PutPath
import com.federicogiordano.mirage.models.PutPathGuide
import com.federicogiordano.mirage.models.PutPathGuidePosition
import com.federicogiordano.mirage.models.PutPathGuidesPosition
import com.federicogiordano.mirage.models.PutPosition
import com.federicogiordano.mirage.models.PutPositionTransitionList
import com.federicogiordano.mirage.models.PutRegister
import com.federicogiordano.mirage.models.PutRemoteSupport
import com.federicogiordano.mirage.models.PutSession
import com.federicogiordano.mirage.models.PutSetting
import com.federicogiordano.mirage.models.PutSettingAdvanced
import com.federicogiordano.mirage.models.PutShelfType
import com.federicogiordano.mirage.models.PutSoftwareLockSelf
import com.federicogiordano.mirage.models.PutSound
import com.federicogiordano.mirage.models.PutStatus
import com.federicogiordano.mirage.models.PutUser
import com.federicogiordano.mirage.models.PutUserGroup

import com.federicogiordano.mirage.infrastructure.*
import com.federicogiordano.mirage.network.openapi.infrastructure.ApiClient
import io.ktor.client.HttpClient
import io.ktor.client.HttpClientConfig
import io.ktor.client.engine.HttpClientEngine
import kotlinx.serialization.json.Json
import kotlinx.serialization.*
import kotlinx.serialization.encoding.*

open class DefaultApi : ApiClient {

    constructor(
        baseUrl: String = ApiClient.BASE_URL,
        httpClientEngine: HttpClientEngine? = null,
        httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
        jsonSerializer: Json = ApiClient.JSON_DEFAULT
    ) : super(baseUrl = baseUrl, httpClientEngine = httpClientEngine, httpClientConfig = httpClientConfig, jsonBlock = jsonSerializer)

    constructor(
        baseUrl: String,
        httpClient: HttpClient
    ): super(baseUrl = baseUrl, httpClient = httpClient)

    /**
     * Retrieve the details about the action. It displays the parameters of the action and the limits for the values among others
     * 
     * @param actionType The action_type to search for
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetActionDefinition
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun actionsActionTypeGet(actionType: kotlin.String, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetActionDefinition> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/actions/{action_type}".replace("{" + "action_type" + "}", "$actionType"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Add a new action definition with the specified action_type
     * 
     * @param actionType The action_type to add the new resource to
     * @param postActionDefinition The details of the action_definition
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetActionDefinition
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun actionsActionTypePost(actionType: kotlin.String, postActionDefinition: PostActionDefinition, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetActionDefinition> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = postActionDefinition

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/actions/{action_type}".replace("{" + "action_type" + "}", "$actionType"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Retrieve the list of action definitions
     * 
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetActionDefinitions
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun actionsGet(acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetActionDefinitions> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/actions",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Retrieve the details about the action. It displays the parameters of the action and the limits for the values among others
     * 
     * @param actionType The action_type to search for
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetAreaActionDefinition
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun areaEventsActionDefinitionsActionTypeGet(actionType: kotlin.String, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetAreaActionDefinition> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/area_events/action_definitions/{action_type}".replace("{" + "action_type" + "}", "$actionType"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Retrieve definitions of area actions and their parameters
     * 
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetAreaActionDefinitions
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun areaEventsActionDefinitionsGet(acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetAreaActionDefinitions> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/area_events/action_definitions",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Retrieve definitions of areas and their actions
     * 
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetAreaEventsDefinitions
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun areaEventsDefinitionsGet(acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetAreaEventsDefinitions> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/area_events/definitions",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Retrieve the list of area events
     * 
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return kotlin.collections.List<GetAreaEvents>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun areaEventsGet(acceptLanguage: kotlin.String? = "en-US"): HttpResponse<kotlin.collections.List<GetAreaEvents>> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/area_events",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<AreaEventsGetResponse>().map { value }
    }

    @Serializable
    private class AreaEventsGetResponse(val value: List<GetAreaEvents>) {
        @Serializer(AreaEventsGetResponse::class)
        companion object : KSerializer<AreaEventsGetResponse> {
            private val serializer: KSerializer<List<GetAreaEvents>> = serializer<List<GetAreaEvents>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: AreaEventsGetResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = AreaEventsGetResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Erase the area event with the specified GUID
     * 
     * @param guid The guid to delete
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return void
     */
    open suspend fun areaEventsGuidDelete(guid: kotlin.String, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/area_events/{guid}".replace("{" + "guid" + "}", "$guid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Retrieve the details about the area event with the specified GUID
     * 
     * @param guid The guid to search for
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetAreaEvent
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun areaEventsGuidGet(guid: kotlin.String, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetAreaEvent> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/area_events/{guid}".replace("{" + "guid" + "}", "$guid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Modify the values of the area event with the specified GUID
     * 
     * @param guid The guid to modify
     * @param putAreaEvent The new values of the area_event
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetAreaEvent
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun areaEventsGuidPut(guid: kotlin.String, putAreaEvent: PutAreaEvent, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetAreaEvent> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = putAreaEvent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/area_events/{guid}".replace("{" + "guid" + "}", "$guid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Add a new area event
     * 
     * @param postAreaEvents The details of the area_events
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetAreaEvents
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun areaEventsPost(postAreaEvents: PostAreaEvents, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetAreaEvents> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = postAreaEvents

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/area_events",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Disconnect the Bluetooth device
     * 
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return void
     */
    open suspend fun bluetoothDelete(acceptLanguage: kotlin.String? = "en-US"): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/bluetooth",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Retrieve the status of the Bluetooth connection
     * 
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun bluetoothGet(acceptLanguage: kotlin.String? = "en-US"): HttpResponse<kotlin.String> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/bluetooth",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Connect to the Bluetooth device with the given GUID
     * 
     * @param postBluetoothStatus The details of the bluetooth_status
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun bluetoothPost(postBluetoothStatus: PostBluetoothStatus, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<kotlin.String> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = postBluetoothStatus

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/bluetooth",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Modify the outputs of the connected Bluetooth device
     * 
     * @param putBluetoothStatus The new values of the bluetooth_status
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun bluetoothPut(putBluetoothStatus: PutBluetoothStatus, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<kotlin.String> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = putBluetoothStatus

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/bluetooth",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Retrieve the list of configured Bluetooth devices
     * 
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return kotlin.collections.List<GetBluetoothRelays>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun bluetoothRelaysGet(acceptLanguage: kotlin.String? = "en-US"): HttpResponse<kotlin.collections.List<GetBluetoothRelays>> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/bluetooth_relays",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<BluetoothRelaysGetResponse>().map { value }
    }

    @Serializable
    private class BluetoothRelaysGetResponse(val value: List<GetBluetoothRelays>) {
        @Serializer(BluetoothRelaysGetResponse::class)
        companion object : KSerializer<BluetoothRelaysGetResponse> {
            private val serializer: KSerializer<List<GetBluetoothRelays>> = serializer<List<GetBluetoothRelays>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: BluetoothRelaysGetResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = BluetoothRelaysGetResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Erase the Bluetooth device with the specified GUID
     * 
     * @param guid The guid to delete
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return void
     */
    open suspend fun bluetoothRelaysGuidDelete(guid: kotlin.String, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/bluetooth_relays/{guid}".replace("{" + "guid" + "}", "$guid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Retrieve the details about the Bluetooth device with the specified GUID
     * 
     * @param guid The guid to search for
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetBluetoothRelay
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun bluetoothRelaysGuidGet(guid: kotlin.String, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetBluetoothRelay> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/bluetooth_relays/{guid}".replace("{" + "guid" + "}", "$guid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Modify the values of the Bluetooth device with the specified GUID
     * 
     * @param guid The guid to modify
     * @param putBluetoothRelay The new values of the bluetooth_relay
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetBluetoothRelay
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun bluetoothRelaysGuidPut(guid: kotlin.String, putBluetoothRelay: PutBluetoothRelay, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetBluetoothRelay> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = putBluetoothRelay

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/bluetooth_relays/{guid}".replace("{" + "guid" + "}", "$guid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Add a new Bluetooth device
     * 
     * @param postBluetoothRelays The details of the bluetooth_relays
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetBluetoothRelays
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun bluetoothRelaysPost(postBluetoothRelays: PostBluetoothRelays, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetBluetoothRelays> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = postBluetoothRelays

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/bluetooth_relays",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Start the discovery of Bluetooth devices
     * 
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return kotlin.collections.List<GetBluetooth>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun bluetoothScanGet(acceptLanguage: kotlin.String? = "en-US"): HttpResponse<kotlin.collections.List<GetBluetooth>> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/bluetooth/scan",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<BluetoothScanGetResponse>().map { value }
    }

    @Serializable
    private class BluetoothScanGetResponse(val value: List<GetBluetooth>) {
        @Serializer(BluetoothScanGetResponse::class)
        companion object : KSerializer<BluetoothScanGetResponse> {
            private val serializer: KSerializer<List<GetBluetooth>> = serializer<List<GetBluetooth>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: BluetoothScanGetResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = BluetoothScanGetResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Retrieve the list of discovered devices
     * 
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetBluetooth
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun bluetoothScanPost(acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetBluetooth> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/bluetooth/scan",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Retrieve the list of cart calibrations
     * 
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return kotlin.collections.List<GetCartCalibrations>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun cartCalibrationsGet(acceptLanguage: kotlin.String? = "en-US"): HttpResponse<kotlin.collections.List<GetCartCalibrations>> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/cart_calibrations",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<CartCalibrationsGetResponse>().map { value }
    }

    @Serializable
    private class CartCalibrationsGetResponse(val value: List<GetCartCalibrations>) {
        @Serializer(CartCalibrationsGetResponse::class)
        companion object : KSerializer<CartCalibrationsGetResponse> {
            private val serializer: KSerializer<List<GetCartCalibrations>> = serializer<List<GetCartCalibrations>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: CartCalibrationsGetResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = CartCalibrationsGetResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Erase the cart calibration with the specified GUID
     * 
     * @param guid The guid to delete
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return void
     */
    open suspend fun cartCalibrationsGuidDelete(guid: kotlin.String, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/cart_calibrations/{guid}".replace("{" + "guid" + "}", "$guid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Retrieve the details about the cart calibration with the specified GUID
     * 
     * @param guid The guid to search for
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetCartCalibration
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun cartCalibrationsGuidGet(guid: kotlin.String, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetCartCalibration> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/cart_calibrations/{guid}".replace("{" + "guid" + "}", "$guid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Modify the values of the cart calibration with the specified GUID
     * 
     * @param guid The guid to modify
     * @param putCartCalibration The new values of the cart_calibration
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetCartCalibration
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun cartCalibrationsGuidPut(guid: kotlin.String, putCartCalibration: PutCartCalibration, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetCartCalibration> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = putCartCalibration

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/cart_calibrations/{guid}".replace("{" + "guid" + "}", "$guid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Add a new cart calibration
     * 
     * @param postCartCalibrations The details of the cart_calibrations
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetCartCalibrations
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun cartCalibrationsPost(postCartCalibrations: PostCartCalibrations, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetCartCalibrations> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = postCartCalibrations

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/cart_calibrations",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Retrieve the list of cart types
     * 
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return kotlin.collections.List<GetCartTypes>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun cartTypesGet(acceptLanguage: kotlin.String? = "en-US"): HttpResponse<kotlin.collections.List<GetCartTypes>> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/cart_types",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<CartTypesGetResponse>().map { value }
    }

    @Serializable
    private class CartTypesGetResponse(val value: List<GetCartTypes>) {
        @Serializer(CartTypesGetResponse::class)
        companion object : KSerializer<CartTypesGetResponse> {
            private val serializer: KSerializer<List<GetCartTypes>> = serializer<List<GetCartTypes>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: CartTypesGetResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = CartTypesGetResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Erase the cart type with the specified GUID
     * 
     * @param guid The guid to delete
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return void
     */
    open suspend fun cartTypesGuidDelete(guid: kotlin.String, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/cart_types/{guid}".replace("{" + "guid" + "}", "$guid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Retrieve the details about the cart type with the specified GUID
     * 
     * @param guid The guid to search for
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetCartType
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun cartTypesGuidGet(guid: kotlin.String, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetCartType> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/cart_types/{guid}".replace("{" + "guid" + "}", "$guid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Modify the values of the cart type with the specified GUID
     * 
     * @param guid The guid to modify
     * @param putCartType The new values of the cart_type
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetCartType
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun cartTypesGuidPut(guid: kotlin.String, putCartType: PutCartType, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetCartType> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = putCartType

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/cart_types/{guid}".replace("{" + "guid" + "}", "$guid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Add a new cart type
     * 
     * @param postCartTypes The details of the cart_types
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetCartTypes
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun cartTypesPost(postCartTypes: PostCartTypes, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetCartTypes> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = postCartTypes

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/cart_types",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Retrieve the list of carts
     * 
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return kotlin.collections.List<GetCarts>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun cartsGet(acceptLanguage: kotlin.String? = "en-US"): HttpResponse<kotlin.collections.List<GetCarts>> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/carts",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<CartsGetResponse>().map { value }
    }

    @Serializable
    private class CartsGetResponse(val value: List<GetCarts>) {
        @Serializer(CartsGetResponse::class)
        companion object : KSerializer<CartsGetResponse> {
            private val serializer: KSerializer<List<GetCarts>> = serializer<List<GetCarts>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: CartsGetResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = CartsGetResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Erase the cart with the specified GUID
     * 
     * @param guid The guid to delete
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return void
     */
    open suspend fun cartsGuidDelete(guid: kotlin.String, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/carts/{guid}".replace("{" + "guid" + "}", "$guid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Retrieve the details about the cart with the specified GUID
     * 
     * @param guid The guid to search for
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetCart
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun cartsGuidGet(guid: kotlin.String, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetCart> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/carts/{guid}".replace("{" + "guid" + "}", "$guid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Modify the values of the cart with the specified GUID
     * 
     * @param guid The guid to modify
     * @param putCart The new values of the cart
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetCart
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun cartsGuidPut(guid: kotlin.String, putCart: PutCart, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetCart> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = putCart

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/carts/{guid}".replace("{" + "guid" + "}", "$guid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Add a new cart
     * 
     * @param postCarts The details of the carts
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetCarts
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun cartsPost(postCarts: PostCarts, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetCarts> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = postCarts

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/carts",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Deletes all data owned by the current user or users with lower authority
     * 
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return void
     */
    open suspend fun changesMeDelete(acceptLanguage: kotlin.String? = "en-US"): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/changes/me",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Makes a list of all data owned by the current user or users with lower authority
     * 
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun changesMeGet(acceptLanguage: kotlin.String? = "en-US"): HttpResponse<kotlin.String> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/changes/me",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Retrieve the list of widgets of the dashboard with the specified dashboard ID
     * 
     * @param dashboardId The dashboard_id to search for
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return kotlin.collections.List<GetDashboardWidgets>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun dashboardsDashboardIdWidgetsGet(dashboardId: kotlin.String, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<kotlin.collections.List<GetDashboardWidgets>> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/dashboards/{dashboard_id}/widgets".replace("{" + "dashboard_id" + "}", "$dashboardId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<DashboardsDashboardIdWidgetsGetResponse>().map { value }
    }

    @Serializable
    private class DashboardsDashboardIdWidgetsGetResponse(val value: List<GetDashboardWidgets>) {
        @Serializer(DashboardsDashboardIdWidgetsGetResponse::class)
        companion object : KSerializer<DashboardsDashboardIdWidgetsGetResponse> {
            private val serializer: KSerializer<List<GetDashboardWidgets>> = serializer<List<GetDashboardWidgets>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: DashboardsDashboardIdWidgetsGetResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = DashboardsDashboardIdWidgetsGetResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Erase the widget with the specified GUID from the dashboard with the specified dashboard ID
     * 
     * @param dashboardId The dashboard_id to delete
     * @param guid The guid to delete
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return void
     */
    open suspend fun dashboardsDashboardIdWidgetsGuidDelete(dashboardId: kotlin.String, guid: kotlin.String, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/dashboards/{dashboard_id}/widgets/{guid}".replace("{" + "dashboard_id" + "}", "$dashboardId").replace("{" + "guid" + "}", "$guid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Retrieve the details about the widget with the specified GUID in the dashboard with the specified dashboard ID
     * 
     * @param dashboardId The dashboard_id to search for
     * @param guid The guid to search for
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetDashboardWidget
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun dashboardsDashboardIdWidgetsGuidGet(dashboardId: kotlin.String, guid: kotlin.String, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetDashboardWidget> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/dashboards/{dashboard_id}/widgets/{guid}".replace("{" + "dashboard_id" + "}", "$dashboardId").replace("{" + "guid" + "}", "$guid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Modify the values of the widget with the specified GUID in the dashboard with the specified dashboard ID
     * 
     * @param dashboardId The dashboard_id to modify
     * @param guid The guid to modify
     * @param putDashboardWidget The new values of the dashboard_widget
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetDashboardWidget
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun dashboardsDashboardIdWidgetsGuidPut(dashboardId: kotlin.String, guid: kotlin.String, putDashboardWidget: PutDashboardWidget, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetDashboardWidget> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = putDashboardWidget

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/dashboards/{dashboard_id}/widgets/{guid}".replace("{" + "dashboard_id" + "}", "$dashboardId").replace("{" + "guid" + "}", "$guid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Add a new widget to the dashboard with the specified dashboard ID
     * 
     * @param dashboardId The dashboard_id to add the new resource to
     * @param postDashboardWidgets The details of the dashboard_widgets
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetDashboardWidgets
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun dashboardsDashboardIdWidgetsPost(dashboardId: kotlin.String, postDashboardWidgets: PostDashboardWidgets, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetDashboardWidgets> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = postDashboardWidgets

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/dashboards/{dashboard_id}/widgets".replace("{" + "dashboard_id" + "}", "$dashboardId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Retrieve the list of dashboards
     * 
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return kotlin.collections.List<GetDashboards>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun dashboardsGet(acceptLanguage: kotlin.String? = "en-US"): HttpResponse<kotlin.collections.List<GetDashboards>> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/dashboards",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<DashboardsGetResponse>().map { value }
    }

    @Serializable
    private class DashboardsGetResponse(val value: List<GetDashboards>) {
        @Serializer(DashboardsGetResponse::class)
        companion object : KSerializer<DashboardsGetResponse> {
            private val serializer: KSerializer<List<GetDashboards>> = serializer<List<GetDashboards>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: DashboardsGetResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = DashboardsGetResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Erase the dashboard with the specified GUID
     * 
     * @param guid The guid to delete
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return void
     */
    open suspend fun dashboardsGuidDelete(guid: kotlin.String, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/dashboards/{guid}".replace("{" + "guid" + "}", "$guid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Retrieve the details of the dashboard with the specified GUID
     * 
     * @param guid The guid to search for
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetDashboard
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun dashboardsGuidGet(guid: kotlin.String, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetDashboard> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/dashboards/{guid}".replace("{" + "guid" + "}", "$guid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Modify the values of the dashboard with the specified GUID
     * 
     * @param guid The guid to modify
     * @param putDashboard The new values of the dashboard
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetDashboard
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun dashboardsGuidPut(guid: kotlin.String, putDashboard: PutDashboard, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetDashboard> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = putDashboard

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/dashboards/{guid}".replace("{" + "guid" + "}", "$guid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Add a new dashboard
     * 
     * @param postDashboards The details of the dashboards
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetDashboards
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun dashboardsPost(postDashboards: PostDashboards, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetDashboards> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = postDashboards

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/dashboards",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Retrieve the list of docking offsets
     * 
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return kotlin.collections.List<GetDockingOffsets>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun dockingOffsetsGet(acceptLanguage: kotlin.String? = "en-US"): HttpResponse<kotlin.collections.List<GetDockingOffsets>> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/docking_offsets",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<DockingOffsetsGetResponse>().map { value }
    }

    @Serializable
    private class DockingOffsetsGetResponse(val value: List<GetDockingOffsets>) {
        @Serializer(DockingOffsetsGetResponse::class)
        companion object : KSerializer<DockingOffsetsGetResponse> {
            private val serializer: KSerializer<List<GetDockingOffsets>> = serializer<List<GetDockingOffsets>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: DockingOffsetsGetResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = DockingOffsetsGetResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Erase the docking offset with the specified GUID
     * 
     * @param guid The guid to delete
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return void
     */
    open suspend fun dockingOffsetsGuidDelete(guid: kotlin.String, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/docking_offsets/{guid}".replace("{" + "guid" + "}", "$guid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Retrieve the details of the docking offset with the specified GUID
     * 
     * @param guid The guid to search for
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetDockingOffset
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun dockingOffsetsGuidGet(guid: kotlin.String, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetDockingOffset> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/docking_offsets/{guid}".replace("{" + "guid" + "}", "$guid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Modify the values of the docking offset with the specified GUID
     * 
     * @param guid The guid to modify
     * @param putDockingOffset The new values of the docking_offset
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetDockingOffset
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun dockingOffsetsGuidPut(guid: kotlin.String, putDockingOffset: PutDockingOffset, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetDockingOffset> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = putDockingOffset

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/docking_offsets/{guid}".replace("{" + "guid" + "}", "$guid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Add a new docking offset. The only positions that can have docking offsets are Charging stations, V markers and VL markers
     * 
     * @param postDockingOffsets The details of the docking_offsets
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetDockingOffsets
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun dockingOffsetsPost(postDockingOffsets: PostDockingOffsets, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetDockingOffsets> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = postDockingOffsets

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/docking_offsets",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Clean and migrate the database. Keep hardware configurations
     * 
     * @param postFactoryReset The details of the factory_reset
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun factoryResetPost(postFactoryReset: PostFactoryReset, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<kotlin.String> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = postFactoryReset

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/factory_reset",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Retrieve the state of the Hook brake
     * 
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetHookBrake
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun hookBrakeGet(acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetHookBrake> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/hook/brake",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Activate or release the Hook brake
     * 
     * @param putHookBrake The new values of the hook_brake
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetHookBrake
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun hookBrakePut(putHookBrake: PutHookBrake, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetHookBrake> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = putHookBrake

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/hook/brake",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Retrieve the state of the Hook gripper
     * 
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetHookGripper
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun hookGripperGet(acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetHookGripper> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/hook/gripper",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Open or close the Hook gripper
     * 
     * @param putHookGripper The new values of the hook_gripper
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetHookGripper
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun hookGripperPut(putHookGripper: PutHookGripper, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetHookGripper> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = putHookGripper

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/hook/gripper",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Retrieve the height of the Hook
     * 
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetHookHeight
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun hookHeightGet(acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetHookHeight> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/hook/height",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Modify the height of the Hook
     * 
     * @param putHookHeight The new values of the hook_height
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetHookHeight
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun hookHeightPut(putHookHeight: PutHookHeight, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetHookHeight> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = putHookHeight

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/hook/height",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Retrieve the extended status of the Hook
     * 
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetHook
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun hookStatusGet(acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetHook> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/hook/status",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Download a file containing the hardware configuration of the robot
     * 
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun hwExportGet(acceptLanguage: kotlin.String? = "en-US"): HttpResponse<kotlin.String> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/hw/export",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Import the hardware configuration contained in the file into the robot
     * 
     * @param postHwConfigImport The details of the hw_config_import
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun hwImportPost(postHwConfigImport: PostHwConfigImport, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<kotlin.String> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = postHwConfigImport

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/hw/import",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Retrieve the list of configured IO modules
     * 
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return kotlin.collections.List<GetIoModules>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun ioModulesGet(acceptLanguage: kotlin.String? = "en-US"): HttpResponse<kotlin.collections.List<GetIoModules>> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/io_modules",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<IoModulesGetResponse>().map { value }
    }

    @Serializable
    private class IoModulesGetResponse(val value: List<GetIoModules>) {
        @Serializer(IoModulesGetResponse::class)
        companion object : KSerializer<IoModulesGetResponse> {
            private val serializer: KSerializer<List<GetIoModules>> = serializer<List<GetIoModules>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: IoModulesGetResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = IoModulesGetResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Erase the IO device with the specified GUID
     * 
     * @param guid The guid to delete
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return void
     */
    open suspend fun ioModulesGuidDelete(guid: kotlin.String, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/io_modules/{guid}".replace("{" + "guid" + "}", "$guid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Retrieve the details about a IO device with the specified GUID
     * 
     * @param guid The guid to search for
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetIoModule
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun ioModulesGuidGet(guid: kotlin.String, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetIoModule> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/io_modules/{guid}".replace("{" + "guid" + "}", "$guid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Modify the values of the IO device with the specified GUID
     * 
     * @param guid The guid to modify
     * @param putIoModule The new values of the io_module
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetIoModule
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun ioModulesGuidPut(guid: kotlin.String, putIoModule: PutIoModule, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetIoModule> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = putIoModule

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/io_modules/{guid}".replace("{" + "guid" + "}", "$guid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Disconnect from the IO module with the specified GUID
     * 
     * @param guid The guid to delete
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return void
     */
    open suspend fun ioModulesGuidStatusDelete(guid: kotlin.String, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/io_modules/{guid}/status".replace("{" + "guid" + "}", "$guid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Retrieve the status of the connection to the IO module with the specified GUID
     * 
     * @param guid The guid to search for
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun ioModulesGuidStatusGet(guid: kotlin.String, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<kotlin.String> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/io_modules/{guid}/status".replace("{" + "guid" + "}", "$guid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Connect to theIO module with the specified GUID
     * 
     * @param guid The guid to add the new resource to
     * @param body The details of the io_module_status
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun ioModulesGuidStatusPost(guid: kotlin.String, body: kotlin.String, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<kotlin.String> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = IoModulesGuidStatusPostRequest(body)

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/io_modules/{guid}/status".replace("{" + "guid" + "}", "$guid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    @Serializable
    private class IoModulesGuidStatusPostRequest(val value: String) {
        @Serializer(IoModulesGuidStatusPostRequest::class)
        companion object : KSerializer<IoModulesGuidStatusPostRequest> {
            private val serializer: KSerializer<String> = serializer<String>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: IoModulesGuidStatusPostRequest) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = IoModulesGuidStatusPostRequest(serializer.deserialize(decoder))
        }
    }

    /**
     * Modify the outputs of the connected IO module with specified GUID
     * 
     * @param guid The guid to modify
     * @param putIoModuleStatus The new values of the io_module_status
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun ioModulesGuidStatusPut(guid: kotlin.String, putIoModuleStatus: PutIoModuleStatus, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<kotlin.String> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = putIoModuleStatus

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/io_modules/{guid}/status".replace("{" + "guid" + "}", "$guid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Add a new IO module
     * 
     * @param postIoModules The details of the io_modules
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetIoModules
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun ioModulesPost(postIoModules: PostIoModules, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetIoModules> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = postIoModules

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/io_modules",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Erase ALL the error reports
     * 
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return void
     */
    open suspend fun logErrorReportsDelete(acceptLanguage: kotlin.String? = "en-US"): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/log/error_reports",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Retrieve the list of error reports
     * 
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetErrorReports
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun logErrorReportsGet(acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetErrorReports> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/log/error_reports",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Erase the error report with the specified ID
     * 
     * @param id The id to delete
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return void
     */
    open suspend fun logErrorReportsIdDelete(id: kotlin.Int, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/log/error_reports/{id}".replace("{" + "id" + "}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Download the file containing the error report with the specified ID
     * 
     * @param id The id to search for
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun logErrorReportsIdDownloadGet(id: kotlin.Int, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<kotlin.String> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/log/error_reports/{id}/download".replace("{" + "id" + "}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Retrieve the details about the error report with the specified ID
     * 
     * @param id The id to search for
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetErrorReport
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun logErrorReportsIdGet(id: kotlin.Int, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetErrorReport> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/log/error_reports/{id}".replace("{" + "id" + "}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Generate a new error report. This will record the 30s previous to this call in a file.
     * 
     * @param postErrorReports The details of the error_reports
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetErrorReports
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun logErrorReportsPost(postErrorReports: PostErrorReports, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetErrorReports> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = postErrorReports

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/log/error_reports",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Retrieve the list of maps
     * 
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return kotlin.collections.List<GetMaps>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun mapsGet(acceptLanguage: kotlin.String? = "en-US"): HttpResponse<kotlin.collections.List<GetMaps>> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/maps",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<MapsGetResponse>().map { value }
    }

    @Serializable
    private class MapsGetResponse(val value: List<GetMaps>) {
        @Serializer(MapsGetResponse::class)
        companion object : KSerializer<MapsGetResponse> {
            private val serializer: KSerializer<List<GetMaps>> = serializer<List<GetMaps>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: MapsGetResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = MapsGetResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Erase the map with the specified GUID
     * 
     * @param guid The guid to delete
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return void
     */
    open suspend fun mapsGuidDelete(guid: kotlin.String, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/maps/{guid}".replace("{" + "guid" + "}", "$guid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Retrieve the details about the map with the specified GUID
     * 
     * @param guid The guid to search for
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetMap
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun mapsGuidGet(guid: kotlin.String, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetMap> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/maps/{guid}".replace("{" + "guid" + "}", "$guid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Modify the values of the map with the specified GUID
     * 
     * @param guid The guid to modify
     * @param putMap The new values of the map
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetMap
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun mapsGuidPut(guid: kotlin.String, putMap: PutMap, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetMap> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = putMap

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/maps/{guid}".replace("{" + "guid" + "}", "$guid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Retrieve the list of area events that belong to the map with the specified map ID
     * 
     * @param mapId The map_id to search for
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return kotlin.collections.List<GetMapAreaEvent>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun mapsMapIdAreaEventsGet(mapId: kotlin.String, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<kotlin.collections.List<GetMapAreaEvent>> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/maps/{map_id}/area_events".replace("{" + "map_id" + "}", "$mapId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<MapsMapIdAreaEventsGetResponse>().map { value }
    }

    @Serializable
    private class MapsMapIdAreaEventsGetResponse(val value: List<GetMapAreaEvent>) {
        @Serializer(MapsMapIdAreaEventsGetResponse::class)
        companion object : KSerializer<MapsMapIdAreaEventsGetResponse> {
            private val serializer: KSerializer<List<GetMapAreaEvent>> = serializer<List<GetMapAreaEvent>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: MapsMapIdAreaEventsGetResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = MapsMapIdAreaEventsGetResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Retrieve the list of path guides that belong to the map with the specified map ID
     * 
     * @param mapId The map_id to search for
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return kotlin.collections.List<GetMapPathGuides>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun mapsMapIdPathGuidesGet(mapId: kotlin.String, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<kotlin.collections.List<GetMapPathGuides>> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/maps/{map_id}/path_guides".replace("{" + "map_id" + "}", "$mapId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<MapsMapIdPathGuidesGetResponse>().map { value }
    }

    @Serializable
    private class MapsMapIdPathGuidesGetResponse(val value: List<GetMapPathGuides>) {
        @Serializer(MapsMapIdPathGuidesGetResponse::class)
        companion object : KSerializer<MapsMapIdPathGuidesGetResponse> {
            private val serializer: KSerializer<List<GetMapPathGuides>> = serializer<List<GetMapPathGuides>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: MapsMapIdPathGuidesGetResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = MapsMapIdPathGuidesGetResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Retrieve the list of paths that belong to the map with the specified map ID
     * 
     * @param mapId The map_id to search for
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return kotlin.collections.List<GetMapPaths>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun mapsMapIdPathsGet(mapId: kotlin.String, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<kotlin.collections.List<GetMapPaths>> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/maps/{map_id}/paths".replace("{" + "map_id" + "}", "$mapId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<MapsMapIdPathsGetResponse>().map { value }
    }

    @Serializable
    private class MapsMapIdPathsGetResponse(val value: List<GetMapPaths>) {
        @Serializer(MapsMapIdPathsGetResponse::class)
        companion object : KSerializer<MapsMapIdPathsGetResponse> {
            private val serializer: KSerializer<List<GetMapPaths>> = serializer<List<GetMapPaths>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: MapsMapIdPathsGetResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = MapsMapIdPathsGetResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Retrieve the list of positions that belong to the map with the specified map ID
     * 
     * @param mapId The map_id to search for
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return kotlin.collections.List<GetMapPositions>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun mapsMapIdPositionsGet(mapId: kotlin.String, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<kotlin.collections.List<GetMapPositions>> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/maps/{map_id}/positions".replace("{" + "map_id" + "}", "$mapId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<MapsMapIdPositionsGetResponse>().map { value }
    }

    @Serializable
    private class MapsMapIdPositionsGetResponse(val value: List<GetMapPositions>) {
        @Serializer(MapsMapIdPositionsGetResponse::class)
        companion object : KSerializer<MapsMapIdPositionsGetResponse> {
            private val serializer: KSerializer<List<GetMapPositions>> = serializer<List<GetMapPositions>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: MapsMapIdPositionsGetResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = MapsMapIdPositionsGetResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Add a new map
     * 
     * @param postMaps The details of the maps
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetMaps
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun mapsPost(postMaps: PostMaps, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetMaps> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = postMaps

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/maps",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Retrieve the list of mission groups
     * 
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return kotlin.collections.List<GetMissionGroups>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun missionGroupsGet(acceptLanguage: kotlin.String? = "en-US"): HttpResponse<kotlin.collections.List<GetMissionGroups>> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/mission_groups",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<MissionGroupsGetResponse>().map { value }
    }

    @Serializable
    private class MissionGroupsGetResponse(val value: List<GetMissionGroups>) {
        @Serializer(MissionGroupsGetResponse::class)
        companion object : KSerializer<MissionGroupsGetResponse> {
            private val serializer: KSerializer<List<GetMissionGroups>> = serializer<List<GetMissionGroups>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: MissionGroupsGetResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = MissionGroupsGetResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Retrieve the list of missions that belong to the group with the specified group ID
     * 
     * @param groupId The group_id to search for
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return kotlin.collections.List<GetGroupMissions>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun missionGroupsGroupIdMissionsGet(groupId: kotlin.String, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<kotlin.collections.List<GetGroupMissions>> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/mission_groups/{group_id}/missions".replace("{" + "group_id" + "}", "$groupId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<MissionGroupsGroupIdMissionsGetResponse>().map { value }
    }

    @Serializable
    private class MissionGroupsGroupIdMissionsGetResponse(val value: List<GetGroupMissions>) {
        @Serializer(MissionGroupsGroupIdMissionsGetResponse::class)
        companion object : KSerializer<MissionGroupsGroupIdMissionsGetResponse> {
            private val serializer: KSerializer<List<GetGroupMissions>> = serializer<List<GetGroupMissions>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: MissionGroupsGroupIdMissionsGetResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = MissionGroupsGroupIdMissionsGetResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Erase the mission group with the specified GUID
     * 
     * @param guid The guid to delete
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return void
     */
    open suspend fun missionGroupsGuidDelete(guid: kotlin.String, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/mission_groups/{guid}".replace("{" + "guid" + "}", "$guid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Retrieve the details about the mission group with the specified GUID
     * 
     * @param guid The guid to search for
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetMissionGroup
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun missionGroupsGuidGet(guid: kotlin.String, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetMissionGroup> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/mission_groups/{guid}".replace("{" + "guid" + "}", "$guid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Modify the values of the mission group with the specified GUID
     * 
     * @param guid The guid to modify
     * @param putMissionGroup The new values of the mission_group
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetMissionGroup
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun missionGroupsGuidPut(guid: kotlin.String, putMissionGroup: PutMissionGroup, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetMissionGroup> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = putMissionGroup

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/mission_groups/{guid}".replace("{" + "guid" + "}", "$guid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Retrieve the list of action definitions from the mission group with the specified mission group ID
     * 
     * @param missionGroupId The mission_group_id to search for
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetGroupActionDefinition
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun missionGroupsMissionGroupIdActionsGet(missionGroupId: kotlin.String, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetGroupActionDefinition> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/mission_groups/{mission_group_id}/actions".replace("{" + "mission_group_id" + "}", "$missionGroupId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Add a new mission group
     * 
     * @param postMissionGroups The details of the mission_groups
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetMissionGroups
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun missionGroupsPost(postMissionGroups: PostMissionGroups, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetMissionGroups> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = postMissionGroups

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/mission_groups",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Abort all the pending and executing missions from the mission queue
     * 
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return void
     */
    open suspend fun missionQueueDelete(acceptLanguage: kotlin.String? = "en-US"): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/mission_queue",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Retrieve the list of missions in the queue. Finished, failed, pending and executing missions will be displayed here
     * 
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return kotlin.collections.List<GetMissionQueues>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun missionQueueGet(acceptLanguage: kotlin.String? = "en-US"): HttpResponse<kotlin.collections.List<GetMissionQueues>> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/mission_queue",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<MissionQueueGetResponse>().map { value }
    }

    @Serializable
    private class MissionQueueGetResponse(val value: List<GetMissionQueues>) {
        @Serializer(MissionQueueGetResponse::class)
        companion object : KSerializer<MissionQueueGetResponse> {
            private val serializer: KSerializer<List<GetMissionQueues>> = serializer<List<GetMissionQueues>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: MissionQueueGetResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = MissionQueueGetResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Abort the mission with the specified ID in the mission queue
     * 
     * @param id The id to delete
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return void
     */
    open suspend fun missionQueueIdDelete(id: kotlin.Int, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/mission_queue/{id}".replace("{" + "id" + "}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Retrieve the details about the mission with the specified ID in the mission queue
     * 
     * @param id The id to search for
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetMissionQueue
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun missionQueueIdGet(id: kotlin.Int, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetMissionQueue> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/mission_queue/{id}".replace("{" + "id" + "}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Modify the values of the mission with the specified ID in the mission queue
     * 
     * @param id The id to modify
     * @param putMissionQueue The new values of the mission_queue
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetMissionQueue
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun missionQueueIdPut(id: kotlin.Int, putMissionQueue: PutMissionQueue, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetMissionQueue> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = putMissionQueue

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/mission_queue/{id}".replace("{" + "id" + "}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Retrieve the list of actions from the mission with the specified ID in the mission queue
     * 
     * @param missionQueueId The mission_queue_id to search for
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetMissionQueueActions
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun missionQueueMissionQueueIdActionsGet(missionQueueId: kotlin.Int, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetMissionQueueActions> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/mission_queue/{mission_queue_id}/actions".replace("{" + "mission_queue_id" + "}", "$missionQueueId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Retrieve the details about the action with the specified ID from the mission with the specified ID in the mission queue
     * 
     * @param id The id to search for
     * @param missionQueueId The mission_queue_id to search for
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetMissionQueueAction
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun missionQueueMissionQueueIdActionsIdGet(id: kotlin.Int, missionQueueId: kotlin.Int, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetMissionQueueAction> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/mission_queue/{mission_queue_id}/actions/{id}".replace("{" + "id" + "}", "$id").replace("{" + "mission_queue_id" + "}", "$missionQueueId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Add a new mission to the mission queue. The mission will always go to the end of the queue
     * 
     * @param postMissionQueues The details of the mission_queues
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetMissionQueues
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun missionQueuePost(postMissionQueues: PostMissionQueues, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetMissionQueues> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = postMissionQueues

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/mission_queue",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Retrieve the list of missions
     * 
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return kotlin.collections.List<GetMissions>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun missionsGet(acceptLanguage: kotlin.String? = "en-US"): HttpResponse<kotlin.collections.List<GetMissions>> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/missions",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<MissionsGetResponse>().map { value }
    }

    @Serializable
    private class MissionsGetResponse(val value: List<GetMissions>) {
        @Serializer(MissionsGetResponse::class)
        companion object : KSerializer<MissionsGetResponse> {
            private val serializer: KSerializer<List<GetMissions>> = serializer<List<GetMissions>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: MissionsGetResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = MissionsGetResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Retrieve the mission with the specified GUID as an action definition that can be inserted in another mission
     * 
     * @param guid The guid to search for
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return kotlin.collections.List<GetMissionDefinition>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun missionsGuidDefinitionGet(guid: kotlin.String, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<kotlin.collections.List<GetMissionDefinition>> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/missions/{guid}/definition".replace("{" + "guid" + "}", "$guid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<MissionsGuidDefinitionGetResponse>().map { value }
    }

    @Serializable
    private class MissionsGuidDefinitionGetResponse(val value: List<GetMissionDefinition>) {
        @Serializer(MissionsGuidDefinitionGetResponse::class)
        companion object : KSerializer<MissionsGuidDefinitionGetResponse> {
            private val serializer: KSerializer<List<GetMissionDefinition>> = serializer<List<GetMissionDefinition>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: MissionsGuidDefinitionGetResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = MissionsGuidDefinitionGetResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Erase the mission with the specified GUID
     * 
     * @param guid The guid to delete
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return void
     */
    open suspend fun missionsGuidDelete(guid: kotlin.String, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/missions/{guid}".replace("{" + "guid" + "}", "$guid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Retrieve the details about the mission with the specified GUID
     * 
     * @param guid The guid to search for
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetMission
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun missionsGuidGet(guid: kotlin.String, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetMission> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/missions/{guid}".replace("{" + "guid" + "}", "$guid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Modify the values of the mission with the specified GUID
     * 
     * @param guid The guid to modify
     * @param putMission The new values of the mission
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetMission
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun missionsGuidPut(guid: kotlin.String, putMission: PutMission, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetMission> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = putMission

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/missions/{guid}".replace("{" + "guid" + "}", "$guid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Retrieve the list of actions that belong to the mission with the specified mission ID
     * 
     * @param missionId The mission_id to search for
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return kotlin.collections.List<GetMissionActions>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun missionsMissionIdActionsGet(missionId: kotlin.String, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<kotlin.collections.List<GetMissionActions>> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/missions/{mission_id}/actions".replace("{" + "mission_id" + "}", "$missionId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<MissionsMissionIdActionsGetResponse>().map { value }
    }

    @Serializable
    private class MissionsMissionIdActionsGetResponse(val value: List<GetMissionActions>) {
        @Serializer(MissionsMissionIdActionsGetResponse::class)
        companion object : KSerializer<MissionsMissionIdActionsGetResponse> {
            private val serializer: KSerializer<List<GetMissionActions>> = serializer<List<GetMissionActions>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: MissionsMissionIdActionsGetResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = MissionsMissionIdActionsGetResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Erase the action with the specified GUID from the mission with the specified mission ID
     * 
     * @param guid The guid to delete
     * @param missionId The mission_id to delete
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return void
     */
    open suspend fun missionsMissionIdActionsGuidDelete(guid: kotlin.String, missionId: kotlin.String, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/missions/{mission_id}/actions/{guid}".replace("{" + "guid" + "}", "$guid").replace("{" + "mission_id" + "}", "$missionId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Retrieve the details about the action with the specified GUID that belongs to the mission with the specified mission ID
     * 
     * @param guid The guid to search for
     * @param missionId The mission_id to search for
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetMissionAction
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun missionsMissionIdActionsGuidGet(guid: kotlin.String, missionId: kotlin.String, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetMissionAction> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/missions/{mission_id}/actions/{guid}".replace("{" + "guid" + "}", "$guid").replace("{" + "mission_id" + "}", "$missionId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Modify the values of the action with the specified GUID that belongs to the mission with the specified mission ID
     * 
     * @param guid The guid to modify
     * @param missionId The mission_id to modify
     * @param putMissionAction The new values of the mission_action
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetMissionAction
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun missionsMissionIdActionsGuidPut(guid: kotlin.String, missionId: kotlin.String, putMissionAction: PutMissionAction, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetMissionAction> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = putMissionAction

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/missions/{mission_id}/actions/{guid}".replace("{" + "guid" + "}", "$guid").replace("{" + "mission_id" + "}", "$missionId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Add a new action to the mission with the specified mission ID
     * 
     * @param missionId The mission_id to add the new resource to
     * @param postMissionActions The details of the mission_actions
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetMissionActions
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun missionsMissionIdActionsPost(missionId: kotlin.String, postMissionActions: PostMissionActions, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetMissionActions> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = postMissionActions

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/missions/{mission_id}/actions".replace("{" + "mission_id" + "}", "$missionId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Add a new mission
     * 
     * @param postMissions The details of the missions
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetMissions
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun missionsPost(postMissions: PostMissions, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetMissions> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = postMissions

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/missions",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Retrieve the modbus registers linked to actions
     * 
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetModbus
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun modbusGet(acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetModbus> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/modbus",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Retrieve the modbus registers linked to an action
     * 
     * @param id The id to search for
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetModbu
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun modbusIdGet(id: kotlin.String, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetModbu> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/modbus/{id}".replace("{" + "id" + "}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Retrieve the list of coils that can trigger a mission
     * 
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return kotlin.collections.List<GetModbusMissions>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun modbusMissionsGet(acceptLanguage: kotlin.String? = "en-US"): HttpResponse<kotlin.collections.List<GetModbusMissions>> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/modbus/missions",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<ModbusMissionsGetResponse>().map { value }
    }

    @Serializable
    private class ModbusMissionsGetResponse(val value: List<GetModbusMissions>) {
        @Serializer(ModbusMissionsGetResponse::class)
        companion object : KSerializer<ModbusMissionsGetResponse> {
            private val serializer: KSerializer<List<GetModbusMissions>> = serializer<List<GetModbusMissions>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: ModbusMissionsGetResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = ModbusMissionsGetResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Delete the specified ID on the the modbus mission table
     * 
     * @param guid The guid to delete
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return void
     */
    open suspend fun modbusMissionsGuidDelete(guid: kotlin.String, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/modbus/missions/{guid}".replace("{" + "guid" + "}", "$guid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Retrieve the details about the mission linked with the coil
     * 
     * @param guid The guid to search for
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetModbusMission
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun modbusMissionsGuidGet(guid: kotlin.String, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetModbusMission> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/modbus/missions/{guid}".replace("{" + "guid" + "}", "$guid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Modify the values of the modbus mission with the specified ID
     * 
     * @param guid The guid to modify
     * @param putModbusMission The new values of the modbus_mission
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetModbusMission
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun modbusMissionsGuidPut(guid: kotlin.String, putModbusMission: PutModbusMission, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetModbusMission> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = putModbusMission

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/modbus/missions/{guid}".replace("{" + "guid" + "}", "$guid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Create a new link between a coil and a mission
     * 
     * @param postModbusMissions The details of the modbus_missions
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetModbusMissions
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun modbusMissionsPost(postModbusMissions: PostModbusMissions, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetModbusMissions> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = postModbusMissions

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/modbus/missions",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Retrieve the list of path guides
     * 
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return kotlin.collections.List<GetPathGuides>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun pathGuidesGet(acceptLanguage: kotlin.String? = "en-US"): HttpResponse<kotlin.collections.List<GetPathGuides>> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/path_guides",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<PathGuidesGetResponse>().map { value }
    }

    @Serializable
    private class PathGuidesGetResponse(val value: List<GetPathGuides>) {
        @Serializer(PathGuidesGetResponse::class)
        companion object : KSerializer<PathGuidesGetResponse> {
            private val serializer: KSerializer<List<GetPathGuides>> = serializer<List<GetPathGuides>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: PathGuidesGetResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = PathGuidesGetResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Erase the path guide with the specified GUID
     * 
     * @param guid The guid to delete
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return void
     */
    open suspend fun pathGuidesGuidDelete(guid: kotlin.String, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/path_guides/{guid}".replace("{" + "guid" + "}", "$guid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Retrieve the path guide with the specified GUID
     * 
     * @param guid The guid to search for
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetPathGuide
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun pathGuidesGuidGet(guid: kotlin.String, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetPathGuide> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/path_guides/{guid}".replace("{" + "guid" + "}", "$guid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Modify the values of the path guide with the specified GUID
     * 
     * @param guid The guid to modify
     * @param putPathGuide The new values of the path_guide
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetPathGuide
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun pathGuidesGuidPut(guid: kotlin.String, putPathGuide: PutPathGuide, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetPathGuide> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = putPathGuide

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/path_guides/{guid}".replace("{" + "guid" + "}", "$guid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Retrieve the list of allowed start/via/goal options for the selected path guide
     * 
     * @param pathGuideGuid The path_guide_guid to search for
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetPathGuideOptions
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun pathGuidesPathGuideGuidOptionsGet(pathGuideGuid: kotlin.String, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetPathGuideOptions> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/path_guides/{path_guide_guid}/options".replace("{" + "path_guide_guid" + "}", "$pathGuideGuid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Retrieve the list of positions for the path guide with the specified GUID
     * 
     * @param pathGuideGuid The path_guide_guid to search for
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return kotlin.collections.List<GetPathGuidePositions>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun pathGuidesPathGuideGuidPositionsGet(pathGuideGuid: kotlin.String, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<kotlin.collections.List<GetPathGuidePositions>> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/path_guides/{path_guide_guid}/positions".replace("{" + "path_guide_guid" + "}", "$pathGuideGuid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<PathGuidesPathGuideGuidPositionsGetResponse>().map { value }
    }

    @Serializable
    private class PathGuidesPathGuideGuidPositionsGetResponse(val value: List<GetPathGuidePositions>) {
        @Serializer(PathGuidesPathGuideGuidPositionsGetResponse::class)
        companion object : KSerializer<PathGuidesPathGuideGuidPositionsGetResponse> {
            private val serializer: KSerializer<List<GetPathGuidePositions>> = serializer<List<GetPathGuidePositions>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: PathGuidesPathGuideGuidPositionsGetResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = PathGuidesPathGuideGuidPositionsGetResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Erase the position with the specified GUID from the path guide with the specified path guide GUID
     * 
     * @param guid The guid to delete
     * @param pathGuideGuid The path_guide_guid to delete
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return void
     */
    open suspend fun pathGuidesPathGuideGuidPositionsGuidDelete(guid: kotlin.String, pathGuideGuid: kotlin.String, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/path_guides/{path_guide_guid}/positions/{guid}".replace("{" + "guid" + "}", "$guid").replace("{" + "path_guide_guid" + "}", "$pathGuideGuid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Retrieve the position with the specified GUID from the path guide with the specified path guide GUID
     * 
     * @param guid The guid to search for
     * @param pathGuideGuid The path_guide_guid to search for
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetPathGuidePosition
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun pathGuidesPathGuideGuidPositionsGuidGet(guid: kotlin.String, pathGuideGuid: kotlin.String, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetPathGuidePosition> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/path_guides/{path_guide_guid}/positions/{guid}".replace("{" + "guid" + "}", "$guid").replace("{" + "path_guide_guid" + "}", "$pathGuideGuid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Modify the values of the position with the specified GUID from the path guide with the specified path guide GUID
     * 
     * @param guid The guid to modify
     * @param pathGuideGuid The path_guide_guid to modify
     * @param putPathGuidePosition The new values of the path_guide_position
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetPathGuidePosition
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun pathGuidesPathGuideGuidPositionsGuidPut(guid: kotlin.String, pathGuideGuid: kotlin.String, putPathGuidePosition: PutPathGuidePosition, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetPathGuidePosition> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = putPathGuidePosition

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/path_guides/{path_guide_guid}/positions/{guid}".replace("{" + "guid" + "}", "$guid").replace("{" + "path_guide_guid" + "}", "$pathGuideGuid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Add a new position to the path guide with the specified GUID
     * 
     * @param pathGuideGuid The path_guide_guid to add the new resource to
     * @param postPathGuidePositions The details of the path_guide_positions
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetPathGuidePositions
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun pathGuidesPathGuideGuidPositionsPost(pathGuideGuid: kotlin.String, postPathGuidePositions: PostPathGuidePositions, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetPathGuidePositions> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = postPathGuidePositions

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/path_guides/{path_guide_guid}/positions".replace("{" + "path_guide_guid" + "}", "$pathGuideGuid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Retrieve the list of positions used for path guides
     * 
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return kotlin.collections.List<GetPathGuidesPositions>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun pathGuidesPositionsGet(acceptLanguage: kotlin.String? = "en-US"): HttpResponse<kotlin.collections.List<GetPathGuidesPositions>> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/path_guides_positions",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<PathGuidesPositionsGetResponse>().map { value }
    }

    @Serializable
    private class PathGuidesPositionsGetResponse(val value: List<GetPathGuidesPositions>) {
        @Serializer(PathGuidesPositionsGetResponse::class)
        companion object : KSerializer<PathGuidesPositionsGetResponse> {
            private val serializer: KSerializer<List<GetPathGuidesPositions>> = serializer<List<GetPathGuidesPositions>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: PathGuidesPositionsGetResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = PathGuidesPositionsGetResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Erase the path guide position with the specified GUID
     * 
     * @param guid The guid to delete
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return void
     */
    open suspend fun pathGuidesPositionsGuidDelete(guid: kotlin.String, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/path_guides_positions/{guid}".replace("{" + "guid" + "}", "$guid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Retrieve the position for path guides with the specified GUID
     * 
     * @param guid The guid to search for
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetPathGuidesPosition
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun pathGuidesPositionsGuidGet(guid: kotlin.String, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetPathGuidesPosition> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/path_guides_positions/{guid}".replace("{" + "guid" + "}", "$guid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Modify the values of the position for path guides with the specified GUID
     * 
     * @param guid The guid to modify
     * @param putPathGuidesPosition The new values of the path_guides_position
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetPathGuidesPosition
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun pathGuidesPositionsGuidPut(guid: kotlin.String, putPathGuidesPosition: PutPathGuidesPosition, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetPathGuidesPosition> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = putPathGuidesPosition

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/path_guides_positions/{guid}".replace("{" + "guid" + "}", "$guid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Add a new position in a path guide
     * 
     * @param postPathGuidesPositions The details of the path_guides_positions
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetPathGuidesPositions
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun pathGuidesPositionsPost(postPathGuidesPositions: PostPathGuidesPositions, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetPathGuidesPositions> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = postPathGuidesPositions

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/path_guides_positions",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Add a new path guide
     * 
     * @param postPathGuides The details of the path_guides
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetPathGuides
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun pathGuidesPost(postPathGuides: PostPathGuides, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetPathGuides> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = postPathGuides

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/path_guides",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Retrieve the status of path guides precalculation
     * 
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetPathGuidesPrecalc
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun pathGuidesPrecalcGet(acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetPathGuidesPrecalc> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/path_guides_precalc",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Start/stop precalculation of the specified path guide
     * 
     * @param postPathGuidesPrecalc The details of the path_guides_precalc
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetPathGuidesPrecalc
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun pathGuidesPrecalcPost(postPathGuidesPrecalc: PostPathGuidesPrecalc, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetPathGuidesPrecalc> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = postPathGuidesPrecalc

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/path_guides_precalc",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Retrieve the list of paths
     * 
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return kotlin.collections.List<GetPaths>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun pathsGet(acceptLanguage: kotlin.String? = "en-US"): HttpResponse<kotlin.collections.List<GetPaths>> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/paths",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<PathsGetResponse>().map { value }
    }

    @Serializable
    private class PathsGetResponse(val value: List<GetPaths>) {
        @Serializer(PathsGetResponse::class)
        companion object : KSerializer<PathsGetResponse> {
            private val serializer: KSerializer<List<GetPaths>> = serializer<List<GetPaths>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: PathsGetResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = PathsGetResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Erase the path with the specified GUID
     * 
     * @param guid The guid to delete
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return void
     */
    open suspend fun pathsGuidDelete(guid: kotlin.String, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/paths/{guid}".replace("{" + "guid" + "}", "$guid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Retrieve the path with the specified GUID
     * 
     * @param guid The guid to search for
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetPath
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun pathsGuidGet(guid: kotlin.String, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetPath> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/paths/{guid}".replace("{" + "guid" + "}", "$guid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Modify the values of the path with the specified GUID
     * 
     * @param guid The guid to modify
     * @param putPath The new values of the path
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetPath
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun pathsGuidPut(guid: kotlin.String, putPath: PutPath, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetPath> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = putPath

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/paths/{guid}".replace("{" + "guid" + "}", "$guid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Add a new path
     * 
     * @param postPaths The details of the paths
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetPaths
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun pathsPost(postPaths: PostPaths, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetPaths> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = postPaths

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/paths",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Erase the permission with the specified GUID
     * 
     * @param guid The guid to delete
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return void
     */
    open suspend fun permissionsGuidDelete(guid: kotlin.String, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/permissions/{guid}".replace("{" + "guid" + "}", "$guid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Retrieve the details about the permission with the specified GUID
     * 
     * @param guid The guid to search for
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetPermission
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun permissionsGuidGet(guid: kotlin.String, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetPermission> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/permissions/{guid}".replace("{" + "guid" + "}", "$guid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Modify the values of the permission with the specified GUID
     * 
     * @param guid The guid to modify
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetPermission
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun permissionsGuidPut(guid: kotlin.String, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetPermission> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/permissions/{guid}".replace("{" + "guid" + "}", "$guid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Retrieve the list of position transition lists
     * 
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetPositionTransitionLists
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun positionTransitionListsGet(acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetPositionTransitionLists> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/position_transition_lists",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Erase the position transition list with the specified GUID
     * 
     * @param guid The guid to delete
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return void
     */
    open suspend fun positionTransitionListsGuidDelete(guid: kotlin.String, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/position_transition_lists/{guid}".replace("{" + "guid" + "}", "$guid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Retrieve the details about the position transition list with the specified GUID
     * 
     * @param guid The guid to search for
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetPositionTransitionList
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun positionTransitionListsGuidGet(guid: kotlin.String, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetPositionTransitionList> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/position_transition_lists/{guid}".replace("{" + "guid" + "}", "$guid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Modify the values of the position transition list with the specified GUID
     * 
     * @param guid The guid to modify
     * @param putPositionTransitionList The new values of the position_transition_list
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetPositionTransitionList
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun positionTransitionListsGuidPut(guid: kotlin.String, putPositionTransitionList: PutPositionTransitionList, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetPositionTransitionList> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = putPositionTransitionList

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/position_transition_lists/{guid}".replace("{" + "guid" + "}", "$guid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Add a new position transition list
     * 
     * @param postPositionTransitionLists The details of the position_transition_lists
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetPositionTransitionLists
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun positionTransitionListsPost(postPositionTransitionLists: PostPositionTransitionLists, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetPositionTransitionLists> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = postPositionTransitionLists

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/position_transition_lists",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Retrieve a list of possible position types
     * 
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return kotlin.collections.List<GetPositionTypes>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun positionTypesGet(acceptLanguage: kotlin.String? = "en-US"): HttpResponse<kotlin.collections.List<GetPositionTypes>> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/position_types",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<PositionTypesGetResponse>().map { value }
    }

    @Serializable
    private class PositionTypesGetResponse(val value: List<GetPositionTypes>) {
        @Serializer(PositionTypesGetResponse::class)
        companion object : KSerializer<PositionTypesGetResponse> {
            private val serializer: KSerializer<List<GetPositionTypes>> = serializer<List<GetPositionTypes>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: PositionTypesGetResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = PositionTypesGetResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Retrieve the details about the position type with the specified ID
     * 
     * @param id The id to search for
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetPositionType
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun positionTypesIdGet(id: kotlin.Int, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetPositionType> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/position_types/{id}".replace("{" + "id" + "}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Retrieve the list of positions
     * 
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return kotlin.collections.List<GetPositions>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun positionsGet(acceptLanguage: kotlin.String? = "en-US"): HttpResponse<kotlin.collections.List<GetPositions>> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/positions",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<PositionsGetResponse>().map { value }
    }

    @Serializable
    private class PositionsGetResponse(val value: List<GetPositions>) {
        @Serializer(PositionsGetResponse::class)
        companion object : KSerializer<PositionsGetResponse> {
            private val serializer: KSerializer<List<GetPositions>> = serializer<List<GetPositions>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: PositionsGetResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = PositionsGetResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Erase the position with the specified GUID
     * 
     * @param guid The guid to delete
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return void
     */
    open suspend fun positionsGuidDelete(guid: kotlin.String, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/positions/{guid}".replace("{" + "guid" + "}", "$guid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Retrieve the details about the position with the specified GUID
     * 
     * @param guid The guid to search for
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetPosition
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun positionsGuidGet(guid: kotlin.String, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetPosition> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/positions/{guid}".replace("{" + "guid" + "}", "$guid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Modify the values of the position with the specified GUID
     * 
     * @param guid The guid to modify
     * @param putPosition The new values of the position
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetPosition
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun positionsGuidPut(guid: kotlin.String, putPosition: PutPosition, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetPosition> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = putPosition

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/positions/{guid}".replace("{" + "guid" + "}", "$guid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Retrieve the list of helper positions for the position with the specified parent GUID. Only Charging Stations, V markers, VL markers, Shelf and Trolley positions have helper positions
     * 
     * @param parentGuid The parent_guid to search for
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return kotlin.collections.List<GetHelperPositions>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun positionsParentGuidHelperPositionsGet(parentGuid: kotlin.String, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<kotlin.collections.List<GetHelperPositions>> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/positions/{parent_guid}/helper_positions".replace("{" + "parent_guid" + "}", "$parentGuid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<PositionsParentGuidHelperPositionsGetResponse>().map { value }
    }

    @Serializable
    private class PositionsParentGuidHelperPositionsGetResponse(val value: List<GetHelperPositions>) {
        @Serializer(PositionsParentGuidHelperPositionsGetResponse::class)
        companion object : KSerializer<PositionsParentGuidHelperPositionsGetResponse> {
            private val serializer: KSerializer<List<GetHelperPositions>> = serializer<List<GetHelperPositions>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: PositionsParentGuidHelperPositionsGetResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = PositionsParentGuidHelperPositionsGetResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Retrieve the details of the docking offset of the position with the specified position ID
     * 
     * @param posId The pos_id to search for
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return kotlin.collections.List<GetPosDockingOffsets>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun positionsPosIdDockingOffsetsGet(posId: kotlin.String, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<kotlin.collections.List<GetPosDockingOffsets>> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/positions/{pos_id}/docking_offsets".replace("{" + "pos_id" + "}", "$posId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<PositionsPosIdDockingOffsetsGetResponse>().map { value }
    }

    @Serializable
    private class PositionsPosIdDockingOffsetsGetResponse(val value: List<GetPosDockingOffsets>) {
        @Serializer(PositionsPosIdDockingOffsetsGetResponse::class)
        companion object : KSerializer<PositionsPosIdDockingOffsetsGetResponse> {
            private val serializer: KSerializer<List<GetPosDockingOffsets>> = serializer<List<GetPosDockingOffsets>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: PositionsPosIdDockingOffsetsGetResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = PositionsPosIdDockingOffsetsGetResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Add a new position
     * 
     * @param postPositions The details of the positions
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetPositions
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun positionsPost(postPositions: PostPositions, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetPositions> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = postPositions

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/positions",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Retrieve the list of PLC registers from the robot. Registers 1 to 100 are integers and registers 101-200 are float
     * 
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return kotlin.collections.List<GetRegisters>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun registersGet(acceptLanguage: kotlin.String? = "en-US"): HttpResponse<kotlin.collections.List<GetRegisters>> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/registers",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<RegistersGetResponse>().map { value }
    }

    @Serializable
    private class RegistersGetResponse(val value: List<GetRegisters>) {
        @Serializer(RegistersGetResponse::class)
        companion object : KSerializer<RegistersGetResponse> {
            private val serializer: KSerializer<List<GetRegisters>> = serializer<List<GetRegisters>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: RegistersGetResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = RegistersGetResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Retrieve the value of the PLC register with the specified ID. Registers 1 to 100 are integers and registers 101-200 are float
     * 
     * @param id The id to search for
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetRegister
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun registersIdGet(id: kotlin.Int, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetRegister> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/registers/{id}".replace("{" + "id" + "}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Modify the value of the PLC register with the specified ID. Registers 1 to 100 are integers and registers 101-200 are float. Even though this is not a standard use of the POST call it has been included for compatibility purposes
     * 
     * @param id The id to add the new resource to
     * @param postRegister The details of the register
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetRegister
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun registersIdPost(id: kotlin.Int, postRegister: PostRegister, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetRegister> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = postRegister

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/registers/{id}".replace("{" + "id" + "}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Modify the value of the PLC register with the specified ID
     * 
     * @param id The id to modify
     * @param putRegister The new values of the register
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetRegister
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun registersIdPut(id: kotlin.Int, putRegister: PutRegister, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetRegister> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = putRegister

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/registers/{id}".replace("{" + "id" + "}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Retrieve the status of the remote support connection
     * 
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun remoteSupportGet(acceptLanguage: kotlin.String? = "en-US"): HttpResponse<kotlin.String> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/remote_support",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Retrieve the list with the actions performed by the remote support controller
     * 
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun remoteSupportLogGet(acceptLanguage: kotlin.String? = "en-US"): HttpResponse<kotlin.String> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/remote_support/log",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Modify the remote support connection timeout
     * 
     * @param putRemoteSupport The new values of the remote_support
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun remoteSupportPut(putRemoteSupport: PutRemoteSupport, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<kotlin.String> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = putRemoteSupport

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/remote_support",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Add information about other robots in the world. This is used by the Fleet manager to avoid robot collisions
     * 
     * @param postRobots The details of the robots
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun robotsPost(postRobots: PostRobots, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<kotlin.String> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = postRobots

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/robots",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Retrieve service book entries accessible by user
     * 
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetServiceBooks
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun serviceBookGet(acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetServiceBooks> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/service_book",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Erase the note with the specified GUID
     * 
     * @param guid The guid to delete
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return void
     */
    open suspend fun serviceBookGuidDelete(guid: kotlin.String, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/service_book/{guid}".replace("{" + "guid" + "}", "$guid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Retrieve note with the GUID
     * 
     * @param guid The guid to search for
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetServiceBook
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun serviceBookGuidGet(guid: kotlin.String, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetServiceBook> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/service_book/{guid}".replace("{" + "guid" + "}", "$guid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Add a service book note
     * 
     * @param postServiceBooks The details of the service_books
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetServiceBooks
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun serviceBookPost(postServiceBooks: PostServiceBooks, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetServiceBooks> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = postServiceBooks

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/service_book",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Retrieve the list of sessions
     * 
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return kotlin.collections.List<GetSessions>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun sessionsGet(acceptLanguage: kotlin.String? = "en-US"): HttpResponse<kotlin.collections.List<GetSessions>> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/sessions",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<SessionsGetResponse>().map { value }
    }

    @Serializable
    private class SessionsGetResponse(val value: List<GetSessions>) {
        @Serializer(SessionsGetResponse::class)
        companion object : KSerializer<SessionsGetResponse> {
            private val serializer: KSerializer<List<GetSessions>> = serializer<List<GetSessions>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: SessionsGetResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = SessionsGetResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Erase the session with the specified GUID
     * 
     * @param guid The guid to delete
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return void
     */
    open suspend fun sessionsGuidDelete(guid: kotlin.String, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/sessions/{guid}".replace("{" + "guid" + "}", "$guid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Download a file containing the session with the specified GUID
     * 
     * @param guid The guid to search for
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun sessionsGuidExportGet(guid: kotlin.String, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<kotlin.String> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/sessions/{guid}/export".replace("{" + "guid" + "}", "$guid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Retrieve the details about the session with the specified GUID
     * 
     * @param guid The guid to search for
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetSession
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun sessionsGuidGet(guid: kotlin.String, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetSession> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/sessions/{guid}".replace("{" + "guid" + "}", "$guid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Modify the values of the session with the specified GUID
     * 
     * @param guid The guid to modify
     * @param putSession The new values of the session
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetSession
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun sessionsGuidPut(guid: kotlin.String, putSession: PutSession, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetSession> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = putSession

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/sessions/{guid}".replace("{" + "guid" + "}", "$guid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Cancel currently running import
     * 
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return void
     */
    open suspend fun sessionsImportDelete(acceptLanguage: kotlin.String? = "en-US"): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/sessions/import",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Get progress of the running import
     * 
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetSessionImport
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun sessionsImportGet(acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetSessionImport> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/sessions/import",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Import the session contained in the file
     * 
     * @param postSessionImport The details of the session_import
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetSessionImport
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun sessionsImportPost(postSessionImport: PostSessionImport, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetSessionImport> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = postSessionImport

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/sessions/import",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Add a new session
     * 
     * @param postSessions The details of the sessions
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetSessions
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun sessionsPost(postSessions: PostSessions, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetSessions> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = postSessions

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/sessions",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Retrieve the list of maps that belong to the session with the specified session ID
     * 
     * @param sessionId The session_id to search for
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return kotlin.collections.List<GetSessionMaps>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun sessionsSessionIdMapsGet(sessionId: kotlin.String, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<kotlin.collections.List<GetSessionMaps>> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/sessions/{session_id}/maps".replace("{" + "session_id" + "}", "$sessionId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<SessionsSessionIdMapsGetResponse>().map { value }
    }

    @Serializable
    private class SessionsSessionIdMapsGetResponse(val value: List<GetSessionMaps>) {
        @Serializer(SessionsSessionIdMapsGetResponse::class)
        companion object : KSerializer<SessionsSessionIdMapsGetResponse> {
            private val serializer: KSerializer<List<GetSessionMaps>> = serializer<List<GetSessionMaps>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: SessionsSessionIdMapsGetResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = SessionsSessionIdMapsGetResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Retrieve the list of missions that belong to the session with the specified session ID
     * 
     * @param sessionId The session_id to search for
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return kotlin.collections.List<GetSessionMissions>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun sessionsSessionIdMissionsGet(sessionId: kotlin.String, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<kotlin.collections.List<GetSessionMissions>> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/sessions/{session_id}/missions".replace("{" + "session_id" + "}", "$sessionId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<SessionsSessionIdMissionsGetResponse>().map { value }
    }

    @Serializable
    private class SessionsSessionIdMissionsGetResponse(val value: List<GetSessionMissions>) {
        @Serializer(SessionsSessionIdMissionsGetResponse::class)
        companion object : KSerializer<SessionsSessionIdMissionsGetResponse> {
            private val serializer: KSerializer<List<GetSessionMissions>> = serializer<List<GetSessionMissions>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: SessionsSessionIdMissionsGetResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = SessionsSessionIdMissionsGetResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Retrieve the list of position transition lists that belong to the session with the specified session ID
     * 
     * @param sessionId The session_id to search for
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetPositionTransitionListFromSession
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun sessionsSessionIdPositionTransitionListsGet(sessionId: kotlin.String, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetPositionTransitionListFromSession> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/sessions/{session_id}/position_transition_lists".replace("{" + "session_id" + "}", "$sessionId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Retrieve a list with the settings groups
     * 
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return kotlin.collections.List<GetSettingGroups>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun settingGroupsGet(acceptLanguage: kotlin.String? = "en-US"): HttpResponse<kotlin.collections.List<GetSettingGroups>> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/setting_groups",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<SettingGroupsGetResponse>().map { value }
    }

    @Serializable
    private class SettingGroupsGetResponse(val value: List<GetSettingGroups>) {
        @Serializer(SettingGroupsGetResponse::class)
        companion object : KSerializer<SettingGroupsGetResponse> {
            private val serializer: KSerializer<List<GetSettingGroups>> = serializer<List<GetSettingGroups>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: SettingGroupsGetResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = SettingGroupsGetResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Retrieve the details about the settings group with the specified ID
     * 
     * @param id The id to search for
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetSettingGroup
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun settingGroupsIdGet(id: kotlin.String, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetSettingGroup> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/setting_groups/{id}".replace("{" + "id" + "}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Retrieve the list of advanced settings from the settings group with the specified settings group ID
     * 
     * @param settingsGroupId The settings_group_id to search for
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return kotlin.collections.List<GetSettingGroupAdvancedSettings>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun settingGroupsSettingsGroupIdSettingsAdvancedGet(settingsGroupId: kotlin.Int, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<kotlin.collections.List<GetSettingGroupAdvancedSettings>> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/setting_groups/{settings_group_id}/settings/advanced".replace("{" + "settings_group_id" + "}", "$settingsGroupId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<SettingGroupsSettingsGroupIdSettingsAdvancedGetResponse>().map { value }
    }

    @Serializable
    private class SettingGroupsSettingsGroupIdSettingsAdvancedGetResponse(val value: List<GetSettingGroupAdvancedSettings>) {
        @Serializer(SettingGroupsSettingsGroupIdSettingsAdvancedGetResponse::class)
        companion object : KSerializer<SettingGroupsSettingsGroupIdSettingsAdvancedGetResponse> {
            private val serializer: KSerializer<List<GetSettingGroupAdvancedSettings>> = serializer<List<GetSettingGroupAdvancedSettings>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: SettingGroupsSettingsGroupIdSettingsAdvancedGetResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = SettingGroupsSettingsGroupIdSettingsAdvancedGetResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Retrieve the list of settings from the settings group with the specified settings group ID
     * 
     * @param settingsGroupId The settings_group_id to search for
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return kotlin.collections.List<GetSettingGroupSettings>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun settingGroupsSettingsGroupIdSettingsGet(settingsGroupId: kotlin.Int, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<kotlin.collections.List<GetSettingGroupSettings>> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/setting_groups/{settings_group_id}/settings".replace("{" + "settings_group_id" + "}", "$settingsGroupId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<SettingGroupsSettingsGroupIdSettingsGetResponse>().map { value }
    }

    @Serializable
    private class SettingGroupsSettingsGroupIdSettingsGetResponse(val value: List<GetSettingGroupSettings>) {
        @Serializer(SettingGroupsSettingsGroupIdSettingsGetResponse::class)
        companion object : KSerializer<SettingGroupsSettingsGroupIdSettingsGetResponse> {
            private val serializer: KSerializer<List<GetSettingGroupSettings>> = serializer<List<GetSettingGroupSettings>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: SettingGroupsSettingsGroupIdSettingsGetResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = SettingGroupsSettingsGroupIdSettingsGetResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Retrieve the list with the advanced settings
     * 
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return kotlin.collections.List<GetSettingsAdvanced>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun settingsAdvancedGet(acceptLanguage: kotlin.String? = "en-US"): HttpResponse<kotlin.collections.List<GetSettingsAdvanced>> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/settings/advanced",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<SettingsAdvancedGetResponse>().map { value }
    }

    @Serializable
    private class SettingsAdvancedGetResponse(val value: List<GetSettingsAdvanced>) {
        @Serializer(SettingsAdvancedGetResponse::class)
        companion object : KSerializer<SettingsAdvancedGetResponse> {
            private val serializer: KSerializer<List<GetSettingsAdvanced>> = serializer<List<GetSettingsAdvanced>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: SettingsAdvancedGetResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = SettingsAdvancedGetResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Retrieve the details of the advanced setting with the specified ID
     * 
     * @param id The id to search for
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetSettingAdvanced
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun settingsAdvancedIdGet(id: kotlin.String, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetSettingAdvanced> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/settings/advanced/{id}".replace("{" + "id" + "}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Modify the values of the advanced setting with the specified ID
     * 
     * @param id The id to modify
     * @param putSettingAdvanced The new values of the setting_advanced
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetSettingAdvanced
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun settingsAdvancedIdPut(id: kotlin.String, putSettingAdvanced: PutSettingAdvanced, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetSettingAdvanced> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = putSettingAdvanced

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/settings/advanced/{id}".replace("{" + "id" + "}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Retrieve a list with the settings
     * 
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return kotlin.collections.List<GetSettings>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun settingsGet(acceptLanguage: kotlin.String? = "en-US"): HttpResponse<kotlin.collections.List<GetSettings>> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/settings",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<SettingsGetResponse>().map { value }
    }

    @Serializable
    private class SettingsGetResponse(val value: List<GetSettings>) {
        @Serializer(SettingsGetResponse::class)
        companion object : KSerializer<SettingsGetResponse> {
            private val serializer: KSerializer<List<GetSettings>> = serializer<List<GetSettings>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: SettingsGetResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = SettingsGetResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Retrieve the details of the setting with the specified ID
     * 
     * @param id The id to search for
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetSetting
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun settingsIdGet(id: kotlin.String, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetSetting> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/settings/{id}".replace("{" + "id" + "}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Modify the values of the setting with the specified ID
     * 
     * @param id The id to modify
     * @param putSetting The new values of the setting
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetSetting
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun settingsIdPut(id: kotlin.String, putSetting: PutSetting, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetSetting> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = putSetting

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/settings/{id}".replace("{" + "id" + "}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Retrieve the list of shelf types
     * 
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return kotlin.collections.List<GetShelfTypes>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun shelfTypesGet(acceptLanguage: kotlin.String? = "en-US"): HttpResponse<kotlin.collections.List<GetShelfTypes>> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/shelf_types",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<ShelfTypesGetResponse>().map { value }
    }

    @Serializable
    private class ShelfTypesGetResponse(val value: List<GetShelfTypes>) {
        @Serializer(ShelfTypesGetResponse::class)
        companion object : KSerializer<ShelfTypesGetResponse> {
            private val serializer: KSerializer<List<GetShelfTypes>> = serializer<List<GetShelfTypes>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: ShelfTypesGetResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = ShelfTypesGetResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Erase the shelf type with the specified GUID
     * 
     * @param guid The guid to delete
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return void
     */
    open suspend fun shelfTypesGuidDelete(guid: kotlin.String, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/shelf_types/{guid}".replace("{" + "guid" + "}", "$guid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Retrieve the details about the shelf type with the specified GUID
     * 
     * @param guid The guid to search for
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetShelfType
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun shelfTypesGuidGet(guid: kotlin.String, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetShelfType> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/shelf_types/{guid}".replace("{" + "guid" + "}", "$guid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Modify the values of the shelf type with the specified GUID
     * 
     * @param guid The guid to modify
     * @param putShelfType The new values of the shelf_type
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetShelfType
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun shelfTypesGuidPut(guid: kotlin.String, putShelfType: PutShelfType, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetShelfType> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = putShelfType

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/shelf_types/{guid}".replace("{" + "guid" + "}", "$guid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Add a new shelf type
     * 
     * @param postShelfTypes The details of the shelf_types
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetShelfTypes
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun shelfTypesPost(postShelfTypes: PostShelfTypes, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetShelfTypes> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = postShelfTypes

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/shelf_types",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Retrieve the list with all the software backups
     * 
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return kotlin.collections.List<GetSoftwareBackups>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun softwareBackupsGet(acceptLanguage: kotlin.String? = "en-US"): HttpResponse<kotlin.collections.List<GetSoftwareBackups>> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/software/backups",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<SoftwareBackupsGetResponse>().map { value }
    }

    @Serializable
    private class SoftwareBackupsGetResponse(val value: List<GetSoftwareBackups>) {
        @Serializer(SoftwareBackupsGetResponse::class)
        companion object : KSerializer<SoftwareBackupsGetResponse> {
            private val serializer: KSerializer<List<GetSoftwareBackups>> = serializer<List<GetSoftwareBackups>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: SoftwareBackupsGetResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = SoftwareBackupsGetResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Erase the software backup with the specified GUID
     * 
     * @param guid The guid to delete
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return void
     */
    open suspend fun softwareBackupsGuidDelete(guid: kotlin.String, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/software/backups/{guid}".replace("{" + "guid" + "}", "$guid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Retrieve the details about the software backup with the specified GUID
     * 
     * @param guid The guid to search for
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetSoftwareBackup
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun softwareBackupsGuidGet(guid: kotlin.String, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetSoftwareBackup> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/software/backups/{guid}".replace("{" + "guid" + "}", "$guid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * If it exists a software backup with the specified GUID it will restore that backup. Otherwise, it will create a software backup with the specified GUID
     * 
     * @param guid The guid to add the new resource to
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetSoftwareBackup
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun softwareBackupsGuidPost(guid: kotlin.String, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetSoftwareBackup> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/software/backups/{guid}".replace("{" + "guid" + "}", "$guid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Create a new software backup
     * 
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetSoftwareBackups
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun softwareBackupsPost(acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetSoftwareBackups> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/software/backups",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Retrieve the status of the software lock
     * 
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return kotlin.collections.List<GetSoftwareLockSelf>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun softwareLockGet(acceptLanguage: kotlin.String? = "en-US"): HttpResponse<kotlin.collections.List<GetSoftwareLockSelf>> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/software/lock",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<SoftwareLockGetResponse>().map { value }
    }

    @Serializable
    private class SoftwareLockGetResponse(val value: List<GetSoftwareLockSelf>) {
        @Serializer(SoftwareLockGetResponse::class)
        companion object : KSerializer<SoftwareLockGetResponse> {
            private val serializer: KSerializer<List<GetSoftwareLockSelf>> = serializer<List<GetSoftwareLockSelf>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: SoftwareLockGetResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = SoftwareLockGetResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Modify the software lock
     * 
     * @param putSoftwareLockSelf The new values of the software_lock_self
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetSoftwareLockSelf
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun softwareLockPut(putSoftwareLockSelf: PutSoftwareLockSelf, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetSoftwareLockSelf> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = putSoftwareLockSelf

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/software/lock",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Retrieve the list of software upgrade logs
     * 
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return kotlin.collections.List<GetSoftwareLogs>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun softwareLogsGet(acceptLanguage: kotlin.String? = "en-US"): HttpResponse<kotlin.collections.List<GetSoftwareLogs>> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/software/logs",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<SoftwareLogsGetResponse>().map { value }
    }

    @Serializable
    private class SoftwareLogsGetResponse(val value: List<GetSoftwareLogs>) {
        @Serializer(SoftwareLogsGetResponse::class)
        companion object : KSerializer<SoftwareLogsGetResponse> {
            private val serializer: KSerializer<List<GetSoftwareLogs>> = serializer<List<GetSoftwareLogs>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: SoftwareLogsGetResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = SoftwareLogsGetResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Retrieve the details about the software upgrade log with the specified GUID
     * 
     * @param guid The guid to search for
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetSoftwareLog
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun softwareLogsGuidGet(guid: kotlin.String, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetSoftwareLog> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/software/logs/{guid}".replace("{" + "guid" + "}", "$guid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Retrieve a list of the software upgrade performed
     * 
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return kotlin.collections.List<GetSoftwareUpgrades>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun softwareUpgradesGet(acceptLanguage: kotlin.String? = "en-US"): HttpResponse<kotlin.collections.List<GetSoftwareUpgrades>> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/software/upgrades",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<SoftwareUpgradesGetResponse>().map { value }
    }

    @Serializable
    private class SoftwareUpgradesGetResponse(val value: List<GetSoftwareUpgrades>) {
        @Serializer(SoftwareUpgradesGetResponse::class)
        companion object : KSerializer<SoftwareUpgradesGetResponse> {
            private val serializer: KSerializer<List<GetSoftwareUpgrades>> = serializer<List<GetSoftwareUpgrades>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: SoftwareUpgradesGetResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = SoftwareUpgradesGetResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Erase the upgrade file with the specified GUID
     * 
     * @param guid The guid to delete
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return void
     */
    open suspend fun softwareUpgradesGuidDelete(guid: kotlin.String, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/software/upgrades/{guid}".replace("{" + "guid" + "}", "$guid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Retrieve the details of the software upgrade with the specified GUID
     * 
     * @param guid The guid to search for
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetSoftwareUpgrade
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun softwareUpgradesGuidGet(guid: kotlin.String, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetSoftwareUpgrade> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/software/upgrades/{guid}".replace("{" + "guid" + "}", "$guid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Upgrade to the version of the upgrade file with the specified GUID
     * 
     * @param guid The guid to add the new resource to
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetSoftwareUpgrade
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun softwareUpgradesGuidPost(guid: kotlin.String, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetSoftwareUpgrade> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/software/upgrades/{guid}".replace("{" + "guid" + "}", "$guid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Upgrade with the provided upgrade file
     * 
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetSoftwareUpgrades
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun softwareUpgradesPost(acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetSoftwareUpgrades> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/software/upgrades",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Retrieve the list of sounds
     * 
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return kotlin.collections.List<GetSounds>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun soundsGet(acceptLanguage: kotlin.String? = "en-US"): HttpResponse<kotlin.collections.List<GetSounds>> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/sounds",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<SoundsGetResponse>().map { value }
    }

    @Serializable
    private class SoundsGetResponse(val value: List<GetSounds>) {
        @Serializer(SoundsGetResponse::class)
        companion object : KSerializer<SoundsGetResponse> {
            private val serializer: KSerializer<List<GetSounds>> = serializer<List<GetSounds>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: SoundsGetResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = SoundsGetResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Erase the sound with the specified GUID
     * 
     * @param guid The guid to delete
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return void
     */
    open suspend fun soundsGuidDelete(guid: kotlin.String, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/sounds/{guid}".replace("{" + "guid" + "}", "$guid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Retrieve the details about the sound with the specified GUID
     * 
     * @param guid The guid to search for
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetSound
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun soundsGuidGet(guid: kotlin.String, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetSound> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/sounds/{guid}".replace("{" + "guid" + "}", "$guid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Modify the values of the sound with the specified GUID
     * 
     * @param guid The guid to modify
     * @param putSound The new values of the sound
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetSound
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun soundsGuidPut(guid: kotlin.String, putSound: PutSound, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetSound> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = putSound

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/sounds/{guid}".replace("{" + "guid" + "}", "$guid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Download the sound file of the sound with the specified GUID
     * 
     * @param guid The guid to search for
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return kotlin.collections.List<GetSoundStream>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun soundsGuidStreamGet(guid: kotlin.String, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<kotlin.collections.List<GetSoundStream>> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/sounds/{guid}/stream".replace("{" + "guid" + "}", "$guid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<SoundsGuidStreamGetResponse>().map { value }
    }

    @Serializable
    private class SoundsGuidStreamGetResponse(val value: List<GetSoundStream>) {
        @Serializer(SoundsGuidStreamGetResponse::class)
        companion object : KSerializer<SoundsGuidStreamGetResponse> {
            private val serializer: KSerializer<List<GetSoundStream>> = serializer<List<GetSoundStream>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: SoundsGuidStreamGetResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = SoundsGuidStreamGetResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Add a new sound
     * 
     * @param postSounds The details of the sounds
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetSounds
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun soundsPost(postSounds: PostSounds, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetSounds> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = postSounds

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/sounds",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Retrieve the list with the distance driven by the robot at different dates and times
     * 
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetDistanceStatistics
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun statisticsDistanceGet(acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetDistanceStatistics> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/statistics/distance",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Retrieve the status
     * 
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetStatus
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun statusGet(acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetStatus> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/status",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Modify the status
     * 
     * @param putStatus The new values of the status
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetStatus
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun statusPut(putStatus: PutStatus, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetStatus> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = putStatus

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/status",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Retrieve the information about the system. It contains different information like serial numbers of hardware components, MAC addresses of network cards, etc…
     * 
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun systemInfoGet(acceptLanguage: kotlin.String? = "en-US"): HttpResponse<kotlin.String> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/system/info",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Retrieve the list of user groups
     * 
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return kotlin.collections.List<GetUserGroups>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun userGroupsGet(acceptLanguage: kotlin.String? = "en-US"): HttpResponse<kotlin.collections.List<GetUserGroups>> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/user_groups",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<UserGroupsGetResponse>().map { value }
    }

    @Serializable
    private class UserGroupsGetResponse(val value: List<GetUserGroups>) {
        @Serializer(UserGroupsGetResponse::class)
        companion object : KSerializer<UserGroupsGetResponse> {
            private val serializer: KSerializer<List<GetUserGroups>> = serializer<List<GetUserGroups>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: UserGroupsGetResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = UserGroupsGetResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Erase the user group with the specified GUID
     * 
     * @param guid The guid to delete
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return void
     */
    open suspend fun userGroupsGuidDelete(guid: kotlin.String, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/user_groups/{guid}".replace("{" + "guid" + "}", "$guid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Retrieve the details about the user group with the specified GUID
     * 
     * @param guid The guid to search for
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetUserGroup
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun userGroupsGuidGet(guid: kotlin.String, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetUserGroup> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/user_groups/{guid}".replace("{" + "guid" + "}", "$guid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Modify the values of the user group with the specified GUID
     * 
     * @param guid The guid to modify
     * @param putUserGroup The new values of the user_group
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetUserGroup
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun userGroupsGuidPut(guid: kotlin.String, putUserGroup: PutUserGroup, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetUserGroup> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = putUserGroup

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/user_groups/{guid}".replace("{" + "guid" + "}", "$guid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Add a new user group
     * 
     * @param postUserGroups The details of the user_groups
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetUserGroups
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun userGroupsPost(postUserGroups: PostUserGroups, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetUserGroups> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = postUserGroups

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/user_groups",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Retrieve the list of permissions of the user group with the specified group GUID
     * 
     * @param userGroupGuid The user_group_guid to search for
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return kotlin.collections.List<GetUserGroupPermission>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun userGroupsUserGroupGuidPermissionsGet(userGroupGuid: kotlin.String, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<kotlin.collections.List<GetUserGroupPermission>> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/user_groups/{user_group_guid}/permissions".replace("{" + "user_group_guid" + "}", "$userGroupGuid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<UserGroupsUserGroupGuidPermissionsGetResponse>().map { value }
    }

    @Serializable
    private class UserGroupsUserGroupGuidPermissionsGetResponse(val value: List<GetUserGroupPermission>) {
        @Serializer(UserGroupsUserGroupGuidPermissionsGetResponse::class)
        companion object : KSerializer<UserGroupsUserGroupGuidPermissionsGetResponse> {
            private val serializer: KSerializer<List<GetUserGroupPermission>> = serializer<List<GetUserGroupPermission>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: UserGroupsUserGroupGuidPermissionsGetResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = UserGroupsUserGroupGuidPermissionsGetResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Add a new permission to the group with the specified group GUID
     * 
     * @param userGroupGuid The user_group_guid to add the new resource to
     * @param postUserGroupPermission The details of the user_group_permission
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetUserGroupPermission
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun userGroupsUserGroupGuidPermissionsPost(userGroupGuid: kotlin.String, postUserGroupPermission: PostUserGroupPermission, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetUserGroupPermission> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = postUserGroupPermission

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/user_groups/{user_group_guid}/permissions".replace("{" + "user_group_guid" + "}", "$userGroupGuid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Logout user
     * 
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return void
     */
    open suspend fun usersAuthDelete(acceptLanguage: kotlin.String? = "en-US"): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/users/auth",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Login with user credentials
     * 
     * @param postUsersAuth The details of the users_auth
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetUsersAuth
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun usersAuthPost(postUsersAuth: PostUsersAuth, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetUsersAuth> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = postUsersAuth

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/users/auth",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Retrieve the list of users
     * 
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return kotlin.collections.List<GetUsers>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun usersGet(acceptLanguage: kotlin.String? = "en-US"): HttpResponse<kotlin.collections.List<GetUsers>> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/users",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<UsersGetResponse>().map { value }
    }

    @Serializable
    private class UsersGetResponse(val value: List<GetUsers>) {
        @Serializer(UsersGetResponse::class)
        companion object : KSerializer<UsersGetResponse> {
            private val serializer: KSerializer<List<GetUsers>> = serializer<List<GetUsers>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: UsersGetResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = UsersGetResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Erase the user with the specified GUID
     * 
     * @param guid The guid to delete
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return void
     */
    open suspend fun usersGuidDelete(guid: kotlin.String, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/users/{guid}".replace("{" + "guid" + "}", "$guid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Retrieve the details about the user with the specified GUID
     * 
     * @param guid The guid to search for
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetUser
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun usersGuidGet(guid: kotlin.String, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetUser> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/users/{guid}".replace("{" + "guid" + "}", "$guid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Modify the values of the user with the specified GUID
     * 
     * @param guid The guid to modify
     * @param putUser The new values of the user
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetUser
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun usersGuidPut(guid: kotlin.String, putUser: PutUser, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetUser> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = putUser

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/users/{guid}".replace("{" + "guid" + "}", "$guid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Retrieve the details about the user currently authorized in the API
     * 
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return kotlin.collections.List<GetMe>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun usersMeGet(acceptLanguage: kotlin.String? = "en-US"): HttpResponse<kotlin.collections.List<GetMe>> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/users/me",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<UsersMeGetResponse>().map { value }
    }

    @Serializable
    private class UsersMeGetResponse(val value: List<GetMe>) {
        @Serializer(UsersMeGetResponse::class)
        companion object : KSerializer<UsersMeGetResponse> {
            private val serializer: KSerializer<List<GetMe>> = serializer<List<GetMe>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: UsersMeGetResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = UsersMeGetResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Retrieve the permission of the user currently authorized in the API
     * 
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return kotlin.collections.List<GetUserMePermissions>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun usersMePermissionsGet(acceptLanguage: kotlin.String? = "en-US"): HttpResponse<kotlin.collections.List<GetUserMePermissions>> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/users/me/permissions",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<UsersMePermissionsGetResponse>().map { value }
    }

    @Serializable
    private class UsersMePermissionsGetResponse(val value: List<GetUserMePermissions>) {
        @Serializer(UsersMePermissionsGetResponse::class)
        companion object : KSerializer<UsersMePermissionsGetResponse> {
            private val serializer: KSerializer<List<GetUserMePermissions>> = serializer<List<GetUserMePermissions>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: UsersMePermissionsGetResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = UsersMePermissionsGetResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Modify the values of the user currently authorized in the API
     * 
     * @param putMe The new values of the me
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetMe
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun usersMePut(putMe: PutMe, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetMe> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = putMe

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/users/me",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Add a new user
     * 
     * @param postUsers The details of the users
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetUsers
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun usersPost(postUsers: PostUsers, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetUsers> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = postUsers

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/users",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Retrieve the list of WiFi networks already configured
     * 
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return kotlin.collections.List<GetWifiConnections>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun wifiConnectionsGet(acceptLanguage: kotlin.String? = "en-US"): HttpResponse<kotlin.collections.List<GetWifiConnections>> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/wifi/connections",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<WifiConnectionsGetResponse>().map { value }
    }

    @Serializable
    private class WifiConnectionsGetResponse(val value: List<GetWifiConnections>) {
        @Serializer(WifiConnectionsGetResponse::class)
        companion object : KSerializer<WifiConnectionsGetResponse> {
            private val serializer: KSerializer<List<GetWifiConnections>> = serializer<List<GetWifiConnections>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: WifiConnectionsGetResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = WifiConnectionsGetResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Add a new WiFi network configuration
     * 
     * @param postWifiConnections The details of the wifi_connections
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetWifiConnections
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun wifiConnectionsPost(postWifiConnections: PostWifiConnections, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetWifiConnections> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = postWifiConnections

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/wifi/connections",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Erase the WiFi network configuration with the specified UUID
     * 
     * @param uuid The uuid to delete
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return void
     */
    open suspend fun wifiConnectionsUuidDelete(uuid: kotlin.String, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/wifi/connections/{uuid}".replace("{" + "uuid" + "}", "$uuid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Retrieve the details about the WiFi network configuration with the specified UUID
     * 
     * @param uuid The uuid to search for
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetWifiConnection
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun wifiConnectionsUuidGet(uuid: kotlin.String, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetWifiConnection> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/wifi/connections/{uuid}".replace("{" + "uuid" + "}", "$uuid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Connect to the network with the specified UUID
     * 
     * @param uuid The uuid to add the new resource to
     * @param postWifiConnection The details of the wifi_connection
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetWifiConnection
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun wifiConnectionsUuidPost(uuid: kotlin.String, postWifiConnection: PostWifiConnection, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetWifiConnection> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = postWifiConnection

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/wifi/connections/{uuid}".replace("{" + "uuid" + "}", "$uuid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Retrieve the URLs to the 3 WiFi related endpoints
     * 
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun wifiGet(acceptLanguage: kotlin.String? = "en-US"): HttpResponse<kotlin.String> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/wifi",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Retrieve the list of WiFi networks available for the robot to connect
     * 
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return kotlin.collections.List<GetWifiNetworks>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun wifiNetworksGet(acceptLanguage: kotlin.String? = "en-US"): HttpResponse<kotlin.collections.List<GetWifiNetworks>> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/wifi/networks",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<WifiNetworksGetResponse>().map { value }
    }

    @Serializable
    private class WifiNetworksGetResponse(val value: List<GetWifiNetworks>) {
        @Serializer(WifiNetworksGetResponse::class)
        companion object : KSerializer<WifiNetworksGetResponse> {
            private val serializer: KSerializer<List<GetWifiNetworks>> = serializer<List<GetWifiNetworks>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: WifiNetworksGetResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = WifiNetworksGetResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Retrieve the details about the WiFi network with the specified GUID
     * 
     * @param guid The guid to search for
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return GetWifiNetwork
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun wifiNetworksGuidGet(guid: kotlin.String, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<GetWifiNetwork> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/wifi/networks/{guid}".replace("{" + "guid" + "}", "$guid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Retrieve the information about the needed resources from the robot
     * 
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun worldModelGet(acceptLanguage: kotlin.String? = "en-US"): HttpResponse<kotlin.String> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/world_model",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Upload the world model with the existing robots, resources and positions and their respective locks
     * 
     * @param postWorldModel The details of the world_model
     * @param acceptLanguage Language header (optional, default to "en-US")
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun worldModelPost(postWorldModel: PostWorldModel, acceptLanguage: kotlin.String? = "en-US"): HttpResponse<kotlin.String> {

        val localVariableAuthNames = listOf<String>("mir")

        val localVariableBody = postWorldModel

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/world_model",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



}
